# ch 5 run 1 20211026
resp_rerun          <- read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN') %>%
dplyr::mutate(mgL = (DO.unit.convert( CH5.O2...air.sat..,  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = (as.numeric(Barometric.pressure..hPa.[1]/10)), bar.units.out = "kpa",
temp.C = as.numeric(CH1.O2.input..phase.[1]) ,
salinity.units = "pp.thou", salinity = as.numeric(Salinity....[1]))) ) %>%
dplyr::select(c("Date..Time..DD.MM.YYYY.HH.MM.SS.", "mgL"))  #reads in the data files
read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37)
read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN') %>%
dplyr::mutate(mgL = (DO.unit.convert( CH5.O2...air.sat..,  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = (as.numeric(Barometric.pressure..hPa.[1]/10)), bar.units.out = "kpa",
temp.C = as.numeric(CH1.O2.input..phase.[1]) ,
salinity.units = "pp.thou", salinity = as.numeric(Salinity....[1]))) )
read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN') %>%
dplyr::mutate(mgL = (DO.unit.convert(CH5.O2...air.sat..,  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = (as.numeric(Barometric.pressure..hPa.[1]/10)), bar.units.out = "kpa",
temp.C = as.numeric(CH1.O2.input..phase.[1]) ,
salinity.units = "pp.thou", salinity = as.numeric(Salinity....[1]))) )
read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN')
resp_rerun          <- read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN')
# ch 5 run 1 20211026
resp_rerun          <- read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN') %>%
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH5.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = (as.numeric(Barometric.pressure..hPa.[1]/10)), bar.units.out = "kpa",
temp.C = as.numeric(CH1.O2.input..phase.[1]) ,
salinity.units = "pp.thou", salinity = as.numeric(Salinity....[1]))) ) %>%
dplyr::select(c("Date..Time..DD.MM.YYYY.HH.MM.SS.", "mgL"))  #reads in the data files
read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN')
# ch 5 run 1 20211026
resp_rerun          <- read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN') %>%
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH5.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = (as.numeric(Barometric.pressure..hPa./10)), bar.units.out = "kpa",
temp.C = as.numeric(CH1.O2.input..phase.[1]) ,
salinity.units = "pp.thou", salinity = as.numeric(Salinity....[1]))) ) %>%
dplyr::select(c("Date..Time..DD.MM.YYYY.HH.MM.SS.", "mgL"))  #reads in the data files
# ch 5 run 1 20211026
resp_rerun          <- read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN') %>%
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH5.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = (as.numeric(Barometric.pressure..hPa.[1])), bar.units.out = "kpa",
temp.C = as.numeric(CH1.O2.input..phase.[1]) ,
salinity.units = "pp.thou", salinity = as.numeric(Salinity....[1]))) ) %>%
dplyr::select(c("Date..Time..DD.MM.YYYY.HH.MM.SS.", "mgL"))  #reads in the data files
resp_rerun
# ch 5 run 1 20211026
resp_rerun          <- read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN') %>%
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH5.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = (as.numeric(Barometric.pressure..hPa.[1]*.1)), bar.units.out = "kpa",
temp.C = as.numeric(CH1.O2.input..phase.[1]) ,
salinity.units = "pp.thou", salinity = as.numeric(Salinity....[1]))) ) %>%
dplyr::select(c("Date..Time..DD.MM.YYYY.HH.MM.SS.", "mgL"))  #reads in the data files
# ch 5 run 1 20211026
resp_rerun          <- read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN') %>%
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH5.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = ((as.numeric(Barometric.pressure..hPa.[1]))/10), bar.units.out = "kpa",
temp.C = as.numeric(CH1.O2.input..phase.[1]) ,
salinity.units = "pp.thou", salinity = as.numeric(Salinity....[1]))) ) %>%
dplyr::select(c("Date..Time..DD.MM.YYYY.HH.MM.SS.", "mgL"))  #reads in the data files
resp_rerun
resp_rerun$date      <- paste((sub("2021.*", "", resp_rerun$Date..DD.MM.YYYY.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
resp_rerun$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", resp_rerun$Time..HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
resp_rerun$seconds   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])    # secs - calc the sec time series
resp_rerun$date
resp_rerun$Time..HH.MM.SS.
resp_rerun
resp_rerun$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", resp_rerun$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
resp_rerun$time_Sec
resp_rerun$seconds   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])    # secs - calc the sec time series
resp_rerun$minutes   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])/60 # mins - calc the minute time series
resp_rerun_LoLin <- resp_rerun %>% dplyr::select(c("minutes", "D5..Oxygen.")) %>% dplyr::filter(minutes > 60) # CRITICAL TO CHANGE THIS PART ACCORDING TO THE VISUAL INSECTION OF RAW PLOT - cahnge to after minute 60
resp_rerun
resp_rerun_LoLin <- resp_rerun %>% dplyr::select(c("minutes", "mgL")) %>% dplyr::filter(minutes > 60) # CRITICAL TO CHANGE THIS PART ACCORDING TO THE VISUAL INSECTION OF RAW PLOT - cahnge to after minute 60
resp_rerun_LoLin
tail(resp_rerun_LoLin)
model <- rankLocReg(
xall    = as.numeric(resp_rerun_LoLin[, 1]),
yall    = as.numeric(resp_rerun_LoLin[, 2]), # call x as the minute timeseries and y as the mg L-1 O2
alpha   = 0.4,  # alpha was assigned earlier as 0.4 by the authors default suggestions - review Olito et al. and their github page for details
method  = "pc",
verbose = TRUE)
resp_rerun_LoLin[seq(1, nrow(resp_rerun_LoLin), 15), ]
resp_rerun
resp_rerun_15sec     <-  resp_rerun[seq(1, nrow(resp_rerun), 15), ]
resp_rerun_15sec
read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN') %>%
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH5.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = ((as.numeric(Barometric.pressure..hPa.[1]))/10), bar.units.out = "kpa",
temp.C = as.numeric(CH1.O2.input..phase.[1]) ,
salinity.units = "pp.thou", salinity = as.numeric(Salinity....[1]))) )
resp_rerun          <- read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN') %>%
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH5.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = ((as.numeric(Barometric.pressure..hPa.[1]))/10), bar.units.out = "kpa",
temp.C = as.numeric(CH1.O2.input..phase.[1]) ,
salinity.units = "pp.thou", salinity = as.numeric(Salinity....[1]))) )
View(resp_rerun)
# ch 5 run 1 20211026 ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resp_rerun          <- read.delim2(file = "Data/Respiration/20211026/Run_1_raw.txt", header = TRUE,skip = 37) %>%
dplyr::filter(!CH5.O2...air.sat..  %in% 'NaN') %>%
dplyr::mutate(mgL = (DO.unit.convert(as.numeric(CH5.O2...air.sat..),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = ((as.numeric(Barometric.pressure..hPa.[1]))/10), bar.units.out = "kpa",
temp.C = as.numeric(CH1.O2.input..phase.[1]) ,
salinity.units = "pp.thou", salinity = as.numeric(Salinity....[1]))) ) %>%
dplyr::select(c("Date..Time..DD.MM.YYYY.HH.MM.SS.", "mgL"))  #reads in the data files
resp_rerun$date      <- paste((sub("2021.*", "", resp_rerun$Date..DD.MM.YYYY.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
resp_rerun$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", resp_rerun$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
resp_rerun$seconds   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])    # secs - calc the sec time series
resp_rerun$minutes   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])/60 # mins - calc the minute time series
resp_rerun_15sec     <-  resp_rerun[seq(1, nrow(resp_rerun), 15), ]
resp_rerun_LoLin <- resp_rerun_15sec %>% dplyr::select(c("minutes", "mgL")) %>% dplyr::filter(minutes > 60) # CRITICAL TO CHANGE THIS PART ACCORDING TO THE VISUAL INSECTION OF RAW PLOT - cahnge to after minute 60
model <- rankLocReg(
xall    = as.numeric(resp_rerun_LoLin[, 1]),
yall    = as.numeric(resp_rerun_LoLin[, 2]), # call x as the minute timeseries and y as the mg L-1 O2
alpha   = 0.4,  # alpha was assigned earlier as 0.4 by the authors default suggestions - review Olito et al. and their github page for details
method  = "pc",
verbose = TRUE)
resp_rerun_LoLin <- resp_rerun_15sec %>% dplyr::select(c("minutes", "mgL")) %>% dplyr::filter(minutes > 60 | minutes <100) # CRITICAL TO CHANGE THIS PART ACCORDING TO THE VISUAL INSECTION OF RAW PLOT - cahnge to after minute 60
resp_rerun_LoLin
resp_rerun_15sec %>% dplyr::select(c("minutes", "mgL")) %>% dplyr::filter(minutes > 60 & minutes < 100)
resp_rerun_LoLin <- resp_rerun_15sec %>% dplyr::select(c("minutes", "mgL")) %>% dplyr::filter(minutes > 60 & minutes < 100) # CRITICAL TO CHANGE THIS PART ACCORDING TO THE VISUAL INSECTION OF RAW PLOT - cahnge to after minute 60
model <- rankLocReg(
xall    = as.numeric(resp_rerun_LoLin[, 1]),
yall    = as.numeric(resp_rerun_LoLin[, 2]), # call x as the minute timeseries and y as the mg L-1 O2
alpha   = 0.4,  # alpha was assigned earlier as 0.4 by the authors default suggestions - review Olito et al. and their github page for details
method  = "pc",
verbose = TRUE)
model
plot(model) # Lpc == -0.0296
plot(model) # Lpc == -0.0296
resp.data_merged[96,c(1:6)] # c5
resp.data_merged[100,c(1:6)] # c5
resp.data_merged[100,c(1:6)] # c5
resp.data_merged
resp.data_merged[23,c(1:6)] # c5
resp.data_merged[23,4] <-
resp.data_merged[95,c(1:6)] #-0.0608251
resp.data_merged[23,4]
resp.data_merged[111,4]
resp.data_merged[23,4]
resp.data_merged[23,c(1:6)] # CH5	Run_1_raw.txt	-0.00704407	-0.005910146	-0.005910146 - omit and change based on visual of the raw data - resp between 60-100 minuntss = -0.0275 (LoLin.R scrip tat the end - redo error data)
plot(model) # Lpc == -0.0275
resp.data_merged[23,4] <-  -0.0275
resp.data_merged[23,4]
Resp.Master <- merge(resp.data_merged, blanks_means, by=c("Date", "pH", "Run", "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::mutate(resp_blankStand = abs(Lpc) - BLANK.mean_Lpc) # ommits respiration rate values showing an increase in O2 over time
blanks_total <- data.frame() # start dataframe
blanks.table <- data.frame(matrix(nrow = 1,ncol = 5)) # make a table template
colnames(blanks.table)<-c('Date', 'Channel', 'mean_Lpc', 'mean_Leq' , 'mean_Lz') # names for comuns in the for loop
blanks_all_raw <- data.frame(merge(resp.ref, resp.data, by = c('Date', 'Channel', 'Filename')) %>%
dplyr::filter(!Date ==  '9/14/2021'   | !Filename == 'Run_1_raw.txt') %>%  # run 1 was restarted due to poor data
dplyr::mutate(filetype = str_sub(Filename, -3,-1)) %>%
dplyr::mutate(filetype = factor(ifelse(filetype == "csv", "SDR_data", "LoLigo_data"))) %>%
dplyr::filter(Chamber_tank  == 'blank') %>%
# dplyr::filter(Lpc <0) %>%
dplyr::filter(!Date == '9/30/2021' | !Lpc < -0.035) %>% #omits C6 RR_9.30.21_AM_Plate_1_Run_1.csv	8.0	blank - View the Lolin plot, looks noisy and a fast outlier from the others
dplyr::filter(!Date == '10/26/2021'  | !Channel == "CH8" | !Run == "2" ) %>%  # omit a bad blank that contained a bad seal, noted on the respiration sampling day during the trial
dplyr::filter(!Date == '10/26/2021'  | !Channel == "CH8" | !Run == "3" ) %>%  # omit a bad blank that contained a bad seal, noted on the respiration sampling day during the trial
dplyr::filter(!Date ==  '9/30/2021'   | !pH == "7.5" | !Channel == "B2" | !Run == "1" | !Plate == "1" ) %>%
dplyr::select(c(Date, pH, Run, Plate, Lpc, Leq ,Lz, Channel, Food, Filename, filetype, Chamber_tank)) %>%
dplyr::arrange(Date, Run, pH))
blanks_means <- blanks_all_raw %>%
dplyr::group_by(Date, pH, Run, filetype) %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
BLANK.sd.Lpc   = sd(abs(Lpc)),
BLANK.mean_Leq = mean(abs(Leq)),
BLANK.mean_Lz = mean(abs(Lz)),
n = n()) %>%
dplyr::arrange(Date, Run)
dups_to_add <- blanks_means[c(5:7),] %>% mutate(pH = 7.5) # only pH 8 contains a positive blank on 9/14 Run 1 and 10/26 Run 2- duplicate and save as pH 7.5
blanks_means <- rbind(blanks_means, dups_to_add) %>% dplyr::arrange(Date, Run)
Resp.Master <- merge(resp.data_merged, blanks_means, by=c("Date", "pH", "Run", "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::mutate(resp_blankStand = abs(Lpc) - BLANK.mean_Lpc) # ommits respiration rate values showing an increase in O2 over time
resp.data_merged[23,4]
resp.data_merged[96,4]
resp.data_merged[111,5]
as.numeric(-0.0296)
resp.data_merged[96,4]
resp.data_merged[96,4] <- as.numeric(-0.0296) # 20210930_Plate_1_Run_2_C1_regression - plot shows noise after the 20 minutes mark, we reran this at the end of the LoLin script, insert here!
resp.data_merged[23,4] <- as.numeric(-0.0275)
Resp.Master <- merge(resp.data_merged, blanks_means, by=c("Date", "pH", "Run", "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::mutate(resp_blankStand = abs(Lpc) - BLANK.mean_Lpc) # ommits respiration rate values showing an increase in O2 over time
merge(resp.data_merged, blanks_means, by=c("Date", "pH", "Run", "filetype"))
merge(resp.data_merged, blanks_means, by=c("Date", "pH", "Run", "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::mutate(resp_blankStand = abs(Lpc) - BLANK.mean_Lpc)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(see)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(stringr)
library(latex2exp)
library(Rmisc)
# library(devtools)
library(ggpubr)
library(hrbrthemes)
library(nlme)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # personal computer
# setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # Work computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resp.data       <- read.csv(file="Output/Respiration/Cumulative_resp_alpha0.4_15sectrunc1hour.csv", header=T) %>%
dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt') # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
exp_metadata    <- read.csv(file="Data/ExperimentMetadata.csv", header=T) # treatment assignments to 'Chamber_Tank'
lengths         <- read.csv(file="Data/Respiration/Lengths_Condition_resp_clearance.csv", header=T)
resp.ref        <- read.csv(file="Data/Respiration/Reference_master.csv", header=T) %>% dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt')
DWs_Len_1026    <- read.csv(file="Data/Survival_Size/20211026_lengths_dryweights.csv", header=T)
DWs_Len_914.930 <- read.csv(file="Data/Survival_Size/2021914_930_dryweights.csv", header=T)
# merge the exp_metadata with the resp.data
resp.ref_length_merged                 <- merge(resp.ref, lengths) # all TRUE allows us to keep the blanks
resp.data_merged                       <- merge(resp.data, resp.ref_length_merged) %>% # out master file moving forward....
dplyr::mutate(filetype = str_sub(Filename, -3,-1)) %>%
dplyr::mutate(filetype = factor(ifelse(filetype == "csv", "SDR_data", "LoLigo_data")))
kable(head(resp.data_merged))
resp.data_merged[95,c(1:6)]  # 	C1 RR_9.30.21_AM_Plate_2_Run_1.csv # -0.02890813	-0.0608251	-0.0608251 - Lz and Leq call better regression than Lpc
resp.data_merged[111,c(1:6)] #  C5 RR_9.30.21_PM_Plate_2_Run_2.csv	0.029052351	-0.076034441	-0.076034441
resp.data_merged[96,c(1:6)]  # 	C1 RR_9.30.21_PM_Plate_1_Run_2.csv	0.011656487	0.011656487	0.011656487  - ommit this
resp.data_merged[23,c(1:6)] # CH5	Run_1_raw.txt	-0.00704407	-0.005910146	-0.005910146 - omit and change based on visual of the raw data - resp between 60-100 minuntss = -0.0275 (LoLin.R scrip tat the end - redo error data)
resp.data_merged[95,4] <- resp.data_merged[95,5] # 20210930_Plate_2_Run_2_C5_regression - Lz and Leq call better regression than Lpc
resp.data_merged[111,4] <- resp.data_merged[111,5] # 20210930_Plate_2_Run_1_C1_regression - Lz and Leq call better regression than Lpc
resp.data_merged[96,4] <- as.numeric(-0.0296) # 20210930_Plate_1_Run_2_C1_regression - plot shows noise after the 20 minutes mark, we reran this at the end of the LoLin script, insert here!
resp.data_merged[23,4] <- as.numeric(-0.0275)
resp.data_merged[95,c(1:6)] #-0.0608251
resp.data_merged[111,c(1:6)] # -0.07603444
resp.data_merged[96,c(1:6)] # -0.0296
resp.data_merged[23,4]
resp.data_merged[23,c(1:6)]
blanks_total <- data.frame() # start dataframe
blanks.table <- data.frame(matrix(nrow = 1,ncol = 5)) # make a table template
colnames(blanks.table)<-c('Date', 'Channel', 'mean_Lpc', 'mean_Leq' , 'mean_Lz') # names for comuns in the for loop
blanks_all_raw <- data.frame(merge(resp.ref, resp.data, by = c('Date', 'Channel', 'Filename')) %>%
dplyr::filter(!Date ==  '9/14/2021'   | !Filename == 'Run_1_raw.txt') %>%  # run 1 was restarted due to poor data
dplyr::mutate(filetype = str_sub(Filename, -3,-1)) %>%
dplyr::mutate(filetype = factor(ifelse(filetype == "csv", "SDR_data", "LoLigo_data"))) %>%
dplyr::filter(Chamber_tank  == 'blank') %>%
# dplyr::filter(Lpc <0) %>%
dplyr::filter(!Date == '9/30/2021' | !Lpc < -0.035) %>% #omits C6 RR_9.30.21_AM_Plate_1_Run_1.csv	8.0	blank - View the Lolin plot, looks noisy and a fast outlier from the others
dplyr::filter(!Date == '10/26/2021'  | !Channel == "CH8" | !Run == "2" ) %>%  # omit a bad blank that contained a bad seal, noted on the respiration sampling day during the trial
dplyr::filter(!Date == '10/26/2021'  | !Channel == "CH8" | !Run == "3" ) %>%  # omit a bad blank that contained a bad seal, noted on the respiration sampling day during the trial
dplyr::filter(!Date ==  '9/30/2021'   | !pH == "7.5" | !Channel == "B2" | !Run == "1" | !Plate == "1" ) %>%
dplyr::select(c(Date, pH, Run, Plate, Lpc, Leq ,Lz, Channel, Food, Filename, filetype, Chamber_tank)) %>%
dplyr::arrange(Date, Run, pH))
kable(blanks_all_raw)
blanks_means <- blanks_all_raw %>%
dplyr::group_by(Date, pH, Run, filetype) %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
BLANK.sd.Lpc   = sd(abs(Lpc)),
BLANK.mean_Leq = mean(abs(Leq)),
BLANK.mean_Lz = mean(abs(Lz)),
n = n()) %>%
dplyr::arrange(Date, Run)
kable(blanks_means)
dups_to_add <- blanks_means[c(5:7),] %>% mutate(pH = 7.5) # only pH 8 contains a positive blank on 9/14 Run 1 and 10/26 Run 2- duplicate and save as pH 7.5
blanks_means <- rbind(blanks_means, dups_to_add) %>% dplyr::arrange(Date, Run)
kable(blanks_means) # you can now see that each Date, Run, has a pH 8 and pH 7.5 blank
Resp.Master <- merge(resp.data_merged, blanks_means, by=c("Date", "pH", "Run", "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::mutate(resp_blankStand = abs(Lpc) - BLANK.mean_Lpc) # ommits respiration rate values showing an increase in O2 over time
Resp.less.than.blank <- Resp.Master %>% dplyr::filter(resp_blankStand < 0) %>% dplyr::select(c(1:7,15,18,29)) %>% mutate(Lpc = abs(Lpc)) # call the values with positive resp rates, measing they were slower than the blank!
print(Resp.less.than.blank) # 15 total samples were less than the blank after the correction... (Lpc < BLANK.mean_LPC)
Resp.Master_OM <- Resp.Master[!is.na(Resp.Master$Length_um),] %>% dplyr::filter(!resp_blankStand < 0) %>% # omit respiration values subtracted by blank (resp_blankStand) that are negative (less than the blank)
dplyr::mutate(volume = case_when(filetype == "LoLigo_data" & Date == '9/14/2021' ~ 2.2, # small vessels for loligo system - 22 ml vessels
filetype == "LoLigo_data" & Date == '10/26/2021' & Channel == 'CH1' ~ 68.55323, # larger custom vessels measured individually...
filetype == "LoLigo_data" & Date == '10/26/2021' & Channel == 'CH2' ~ 68.85583, # larger custom vessels measured individually...
filetype == "LoLigo_data" & Date == '10/26/2021' & Channel == 'CH3' ~ 68.87473, # larger custom vessels measured individually...
filetype == "LoLigo_data" & Date == '10/26/2021' & Channel == 'CH4' ~ 68.95481, # larger custom vessels measured individually...
filetype == "LoLigo_data" & Date == '10/26/2021' & Channel == 'CH5' ~ 68.57288, # larger custom vessels measured individually...
filetype == "LoLigo_data" & Date == '10/26/2021' & Channel == 'CH6' ~ 68.01878, # larger custom vessels measured individually...
filetype == "LoLigo_data" & Date == '10/26/2021' & Channel == 'CH7' ~ 68.54551, # larger custom vessels measured individually...
filetype == "LoLigo_data" & Date == '10/26/2021' & Channel == 'CH8' ~ 68.53297, # larger custom vessels measured individually...
filetype == "SDR_data" ~ 1.7)) %>% # 24-well plate - 1700ul
# mg minute -> mg L hr
dplyr::mutate(resp_mg_L_hr =(resp_blankStand *  # resp corrected for blank (remember within Date, Run and treatment!) - currently as raw units of mg O2 per minute (output from LoLinR script)
(volume/1000) * # mult by volume of the resp vessel corrected in Liters - now units in  mg per L per min
60))  %>% # mult by 60 to convert to hours - now units in mg L per hour
# mg L hr -> umol L hr
dplyr::mutate(resp_umol_L_hr = ( (resp_mg_L_hr * 1000) / 16) ) %>% #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
dplyr::mutate(Age = case_when(Date == '9/14/2021' ~ 50, Date == '9/30/2021' ~ 66, Date == '10/26/2021' ~ 92)) %>%
dplyr::mutate(Fed_Unfed = case_when(Fed_Unfed == 'F' ~ "High food", is.na(Fed_Unfed) ~ "High food", Fed_Unfed == 'U' ~ "Low food")) %>%
dplyr::mutate(pCO2 = case_when(pH == 8.0 ~ "500 μatm", pH == 7.5 ~ "800 μatm"))
Resp.Master_OM %>% ggplot(aes(x = Length_um, y = resp_umol_L_hr)) +
geom_smooth(method = "lm") +
theme_classic() +
ylab("resp_umol_L_hr") +
xlab("Length_um") +
geom_point()  +
facet_wrap(~Age + Fed_Unfed, scales = 'free')
# (1)  umol O2 L-1 g dry tissue weight-1 ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# NORMALIZED for Shell length
Resp.Master_OM$resp_µmol_L_mm_Length_hr <- (Resp.Master_OM$resp_umol_L_hr / # multiple by 1000 to convert mmol/ O2 to umol/L O2
(Resp.Master_OM$Length_um/1000)) # normalize by Dry tissue weight  as to mg O2 L-1 g dry tissue weight-1
# (2) mg O2 L-1 g dry tissue weight-1 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# NORMALIZED for Whole animal dry weight (g)
Resp.Master_OM$resp_µmol_mg_hr <- (Resp.Master_OM$resp_umol_L_hr /
(Resp.Master_OM$whole_Dry_weight)) # normalize by Dry tissue weight  as to mg O2 L-1 g dry tissue weight-1
write.csv(Resp.Master_OM, "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/Calculated_Resp_Master.csv")
P_Length_resp_all <- Resp.Master_OM[!is.na(Resp.Master_OM$resp_umol_L_hr),] %>%
ggplot(aes(x = (Length_um/1000), y = resp_umol_L_hr, color = as.factor(pCO2))) +
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_smooth(method = "lm", se=FALSE, color="black", formula = resp_umol_L_hr ~ Length_um) +
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=10))+
labs(title = "Raw Resp v. Shell length (μm)", y = expression(μmol~L^{-1}~O[2]%.%hr^{-1})) +
xlab("Shell length (mm)") +
theme(legend.position="none") +
geom_point()
P_Length_resp_facet <- Resp.Master_OM[!is.na(Resp.Master_OM$resp_umol_L_hr),] %>%
ggplot(aes(x = (Length_um/1000), y = resp_umol_L_hr, color = as.factor(pCO2))) +
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_smooth(method = "lm", se=FALSE, color="black", formula = resp_umol_L_hr ~ Length_um) +
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(μmol~L^{-1}~O[2]%.%hr^{-1})) +
xlab("Shell length (mm)") +
geom_point() +
facet_wrap(~Age*Food, scales = "free")
# print in markdown file
ggarrange(P_Length_resp_all, P_Length_resp_facet,nrow = 2)
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/Shell_length_resp_raw.pdf"), width = 10, height = 6)
ggarrange(P_Length_resp_all, P_Length_resp_facet,ncol = 2)
dev.off()
P_WholeDW_resp_all  <- Resp.Master_OM[!is.na(Resp.Master_OM$resp_umol_L_hr),] %>%
ggplot(aes(x = whole_Dry_weight, y = resp_umol_L_hr, color = as.factor(pCO2))) +
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_smooth(method = "lm", se=FALSE, color="black", formula = resp_umol_L_hr ~ whole_Dry_weight) +
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=10))+
labs(title = "Raw Resp v. Whole dry weight (mg)", y = expression(μmol~L^{-1}~O[2]%.%hr^{-1})) +
theme(legend.position="none") +
xlab("Whole dry weight (mg)") +
geom_point()
P_WholeDW_resp_facet <- Resp.Master_OM[!is.na(Resp.Master_OM$resp_umol_L_hr),] %>%
ggplot(aes(x = whole_Dry_weight, y = resp_umol_L_hr, color = as.factor(pCO2))) +
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_smooth(method = "lm", se=FALSE, color="black", formula = resp_umol_L_hr ~ whole_Dry_weight) +
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none",plot.title = element_text(size=10))+
labs(y = expression(μmol~L^{-1}~O[2]%.%hr^{-1})) +
xlab("Whole dry weight (mg)") +
geom_point() +
facet_wrap(~Age*Food, scales = "free")
# print in markdown file
ggarrange(P_WholeDW_resp_all, P_WholeDW_resp_facet,ncol = 2)
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/WholeDW_resp_raw.pdf"), width = 10, height = 6)
#pdf(paste0(filename = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/WholeDW_resp_raw.pdf"), width = 10, height = 6)
ggarrange(P_WholeDW_resp_all, P_WholeDW_resp_facet,ncol = 2)
dev.off()
# Length_um
SumTab_Len      <- Resp.Master_OM[!is.na(Resp.Master_OM$Length_um),] %>%
mutate(Length_mm = Length_um/1000) %>%
summarySE(measurevar="Length_mm", groupvars=c("Age", "pCO2", "Fed_Unfed"))
SumTab_Len$pCO2 <- factor(SumTab_Len$pCO2, c("500 μatm","800 μatm"))
## Use geom_line and geom_point to plot over time
Length_time    <- ggplot(data=SumTab_Len, aes(x=Age, y=Length_mm, color=pCO2)) +
geom_line(aes(linetype = factor(Fed_Unfed)), size = 0.5) +
geom_point()+
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_errorbar(aes(ymin=Length_mm-se, ymax=Length_mm+se), width=.2,
position=position_dodge(.1))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=10))+
scale_x_continuous(name ="Age (d)") +
labs(title =  "Shell length over time..",
y = "Shell length (mm)") +
scale_linetype_manual(values = c("High food" = "solid", "Low food" = "dashed"))  +
theme(legend.position="none") +
# facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food')))
facet_wrap(~pCO2)
# resp_µmol_L_mm_Length_hr
RespSumTab_Len      <- Resp.Master_OM[!is.na(Resp.Master_OM$resp_µmol_L_mm_Length_hr),] %>%
summarySE(measurevar="resp_µmol_L_mm_Length_hr", groupvars=c("Age", "pCO2", "Fed_Unfed"))
RespSumTab_Len$pCO2 <- factor(RespSumTab_Len$pCO2, c("500 μatm","800 μatm"))
## Use geom_line and geom_point to plot over time
Resp_LengthStand    <- ggplot(data=RespSumTab_Len, aes(x=Age, y=resp_µmol_L_mm_Length_hr, color=pCO2)) +
geom_line(aes(linetype = factor(Fed_Unfed)), size = 0.5) +
geom_point()+
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_errorbar(aes(ymin=resp_µmol_L_mm_Length_hr-se, ymax=resp_µmol_L_mm_Length_hr+se), width=.2,
position=position_dodge(.1))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=10))+
scale_x_continuous(name ="Age (d)") +
labs(title = "Resp corrected by shell length",
y = expression(μmol~L^{-1}~O[2]%.%mm^{-1}~shell~length%.% hr^{-1})) +
scale_linetype_manual(values = c("High food" = "solid", "Low food" = "dashed"))  +
theme(legend.position="none") +
# facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food')))
facet_wrap(~pCO2)
# resp_µmol_mg_hr
SumTab_WholeDW      <- Resp.Master_OM[!is.na(Resp.Master_OM$resp_µmol_mg_hr),] %>%
summarySE(measurevar="whole_Dry_weight", groupvars=c("Age", "pCO2", "Fed_Unfed"))
SumTab_WholeDW$pCO2 <- factor(SumTab_WholeDW$pCO2, c("500 μatm","800 μatm"))
## Use geom_line and geom_point to plot over time
WholeDW_time    <- ggplot(data=SumTab_WholeDW, aes(x=Age, y=whole_Dry_weight, color=pCO2)) +
geom_line(aes(linetype = factor(Fed_Unfed)), size = 0.5) +
geom_point()+
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_errorbar(aes(ymin=whole_Dry_weight-se, ymax=whole_Dry_weight+se), width=.2,
position=position_dodge(.1))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=10))+
scale_x_continuous(name ="Age (d)") +
labs(title = "Whole dry weight over time..",
y = "Whole dry weight (mg)") +
scale_linetype_manual(values = c("High food" = "solid", "Low food" = "dashed"))  +
theme(legend.position="none") +
# facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food')))
facet_wrap(~pCO2)
RespSumTab_DW      <- Resp.Master_OM[!is.na(Resp.Master_OM$resp_µmol_mg_hr),] %>%
summarySE(measurevar="resp_µmol_mg_hr", groupvars=c("Age", "pCO2", "Fed_Unfed"))
RespSumTab_DW$pCO2 <- factor(RespSumTab_DW$pCO2, c("500 μatm","800 μatm"))
## Use geom_line and geom_point to plot over time
Resp_DryWgtStand   <- ggplot(data=RespSumTab_DW, aes(x=Age, y=resp_µmol_mg_hr, color=pCO2)) +
geom_line(aes(linetype = factor(Fed_Unfed)), size = 0.5) +
geom_point()+
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_errorbar(aes(ymin=resp_µmol_mg_hr-se, ymax=resp_µmol_mg_hr+se), width=.2,
position=position_dodge(.1))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size=10))+
scale_x_continuous(name ="Age (d)") +
labs(title = "Resp corrected by whole animal dry weight",
y = expression(μmol~L^{-1}~O[2]%.%mg^{-1}~whole~DW%.% hr^{-1})) +
scale_linetype_manual(values = c("High food" = "solid", "Low food" = "dashed"))  +
theme(legend.position="none") +
# facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food')))
facet_wrap(~pCO2)
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/All_Respiration_normalized_summary.pdf"), width = 10, height = 8)
# pdf(paste0(filename = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/All_Respiration_normalized_summary.pdf"), width = 10, height = 8)
ggarrange(P_Length_resp_all ,Length_time, Resp_LengthStand,
P_WholeDW_resp_all, WholeDW_time, Resp_DryWgtStand, ncol = 3, nrow = 2, heights=c(1,1))
dev.off()
Resp.Master_OM    <- read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/Calculated_Resp_Master.csv", header=T)
Resp_1026 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '10/26/2021')  %>% # call only 10/14
dplyr::select(-Center) %>%
dplyr::mutate(pHxFood = paste(pH,Food, sep = "_")) %>%
dplyr::mutate(random_fact = as.factor(paste(Chamber_tank, Food, sep="_")))
Resp_1026 %>% summarySE(measurevar="resp_µmol_L_mm_Length_hr", groupvars=(c("Food","pH"))) %>%
dplyr::mutate(pCO2 = case_when(pH == 8  ~ "500 μatm", pH == 7.5 ~ "800 μatm"))
# Visualize the data with the random effet as treplicate
Res1026_Length_reps <- ggboxplot(Resp_1026, x = "pHxFood", y = "resp_µmol_L_mm_Length_hr", color = "Replicate",
add = c("mean_se", "dotplot"),
palette = c("#00AFBB", "#E7B800", "brown", "grey"))
# ANOVA (wihtout the random effect
summary(aov(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, data=Resp_1026)) # 0.0392 * (pCO2) 0.0499 * (food) - without the random effect of tank)
# Linear mixed effects model with random effect of Replicate
LMEmod_1026_SL<-lme(resp_µmol_L_mm_Length_hr ~ pCO2 * Food, random=~1|random_fact, data=Resp_1026)
# |     &nbsp;      | numDF | denDF | F-value |  p-value  |
# |:---------------:|:-----:|:-----:|:-------:|:---------:|
# | **(Intercept)** |   1   |  16   |  77.89  | 1.516e-07 |
# |    **pCO2**     |   1   |  12   | 0.01125 |  0.9173   |
# |    **Food**     |   1   |  12   |  25.58  | 0.0002811 |
# |  **pCO2:Food**  |   1   |  12   |  0.227  |  0.6423   |
pander(anova(LMEmod_1026_SL), style='rmarkdown')
kable(as.data.frame(anova(LMEmod_1026_SL))) %>%
kable_styling() %>%
save_kable(file = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/20211026_figs_tables/20211026_resp_LME_Table.png", zoom = 1.5)
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/20211026_figs_tables/20211026_resp_LME_Diagnostics.pdf"))
check_model(LMEmod_1026_SL)
dev.off()
# plot
Resp1026_Length <- ggplot(Resp_1026, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_µmol_L_mm_Length_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, width=0.5, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
scale_x_discrete(labels= c('~500 μatm', '~800 μatm')) +
# scale_y_continuous(expand = c(0, 0), limits = c(0, 250)) +
theme(axis.text=element_text(size=8),
axis.title=element_text(size=8,face="bold")) +
labs(title = "F1 Scallops: respiration rates on 20211026 (shell length stand.)",
y = expression(Respiration~rate~"("~μmol~L^{-1}~O[2]%.%mm^{-1}~shell~length%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~μ*atm~")"))  +
facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food'))) # +
Resp1026_Length
Resp.Master %>% resp_blankStand <- dplyr::filter(resp_blankStand < 0)
Resp.Master %>% \dplyr::filter(resp_blankStand < 0)
Resp.Master %>% dplyr::filter(resp_blankStand < 0)
