library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis")
# CHANGE THE FOLLOWING ..THEN CONTROL A + ENTER ::::::::::::::::::::::
path.p    <- "Data/Respiration" #the location of all your respirometry files
a         <- 0.4
ouputNAME <- "Output/Respiration/Cumulative_resp_alpha0.4.csv"
# ANALYSIS  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Objective: use LoLinr to run all respiration rates in a non-bias and autonomous fashion
# Ouputs: there will be two main resources from this script:
#   (1) cumulative spreasheet of all respiration rate value for each Channel on each day
#   (2) a folder of plots from the LoLinR script to a plots folder - this will allow troubleshooting and sanity checks
# I. call subfolders as dataframe and create a dataframe for the output
# call the subfolder names for the outside loop 'i' (i.e. 20210914)
folder.names           <- basename(list.files(path = path.p, pattern = "", recursive = FALSE)) #list all csv file names in the folder and subfolders
folder.names.table     <- data.frame(folder.names)
# Call the cumulative dataframe that we will write to in the for loop below
df_total             <- data.frame() # start dataframe
resp.table           <- data.frame(matrix(nrow = 1, ncol = 7)) # create dataframe to save cumunalitively during for loop
colnames(resp.table) <- c('Date', 'Channel', 'Lpc', 'Leq' , 'Lz', 'alpha','Filename') # names for comuns in the for loop
folder.names.table
file.names.table
# call all txt files labelled 'raw' in each subfolder (i.e. 20210914) and create a table
file.names.table    <- data.frame(txt.files = (basename(list.files(path = paste(path.p,'/',folder.names.table[1,1],sep=''), pattern = "txt$", recursive = TRUE)))) %>%  dplyr::filter(grepl('raw', txt.files))#list all csv file names in the folder and subfolders
file.names.table
Resp.Data           <- read.delim2(file = paste(path.p,'/',folder.names.table[1,1], '/', file.names.table[2,1], sep=''), header = TRUE,skip = 37) #reads in the data files
Resp.Data
Resp.Data$date      <- paste((sub("2021.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])    # secs - calc the sec time series
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60 # mins - calc the minute time series
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1])
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1])
Resp.Data           <- Resp.Data %>% # use 'dplyr'
#dplyr::filter(!Phase %in% 'Flush') %>% # remove the initial rows labeled flush
dplyr::select(c(date, seconds, minutes, contains(".O2...air.sat"))) # call unique column names for the 8 Channels
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,3) # clean these column names to make things easier - first 3 characters
# Truncate! EVERY 30 SECONDS (note: these txt files are long with measurements every second,trancating reduces the analysis time dramatically)
# the loligo recoreded values every second, this slows the model dramatically with >2000 values for each Channel, call every 30 seconds to speed this up
# discuss with collaborators on this truncated approach
Resp.Data_30sec = Resp.Data[seq(1, nrow(Resp.Data), 30), ]
Resp.Data_30sec
Resp_loop         <- na.omit(Resp.Data_30sec[,c(3,9)]) # noticed some random rows have 'NaN' - so I will loop the min and Channels to ommit Nas before proceeding
Resp_loop
Resp_loop$mgL     <- DO.unit.convert(as.numeric(Resp_loop[,2]),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou)
model <- rankLocReg(
xall    = as.numeric(Resp_loop[, 1]),
yall    = as.numeric(Resp_loop[, 3]), # call x as the minute timeseries and y as the % air saturation of the particular Channel
alpha   = a,  # alpha was assigned earlier as 0.4 by the authors default suggestions - review Olito et al. and their github page for details
method  = "pc",
verbose = TRUE)
sum.table <- summary(model)
sum.table
Resp_loop
Resp_loop[, 1]
Resp_loop[, 1][1:100]
Resp_loop[, 3][1:100]
model <- rankLocReg(
xall    = as.numeric(Resp_loop[, 1][1:55]),
yall    = as.numeric(Resp_loop[, 3][1:55]), # call x as the minute timeseries and y as the % air saturation of the particular Channel
alpha   = a,  # alpha was assigned earlier as 0.4 by the authors default suggestions - review Olito et al. and their github page for details
method  = "pc",
verbose = TRUE)
sum.table <- summary(model)
sum.table
library(dplyr)
library(ggplot2)
library(forcats)
library(lmer4)
library(lmerTest)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis")
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
exp_metadata <- read.csv(file="Data/ExperimentMetadata.csv", header=T) # treatment assignments to 'Chamber_Tank'
resp.ref     <- read.csv(file="Data/Respiration/Reference_master.csv", header=T) # reference for the respirometry data - contains the 'Chamber_Tank' for each sensor channel (whether an animal or a blank)
resp.data    <- read.csv(file="Output/Respiration/Cumulative_resp_alpha0.4.csv", header=T) # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
# merge the exp_metadata with the resp.data
resp.ref_merged                 <- merge(exp_metadata, resp.ref, by = 'Chamber_tank', all=TRUE) # all TRUE allows us to keep the blanks
resp.data_merged                <- merge(resp.data, resp.ref_merged, by = c('Date', 'Channel','Filename')) # out master file moving forward....
dates.runs <- resp.data_merged %>%  # call table
dplyr::distinct(Date, Filename) # call all unique values for date run and sw condition
dates.runs <- na.omit(dates.runs)
# call dataframe and build table to rbind in for loop
blanks_total <- data.frame() # start dataframe
blanks.table <- data.frame(matrix(nrow = 1,ncol = 5)) # make a table template
colnames(blanks.table)<-c('Date', 'Channel', 'mean_Lpc', 'mean_Leq' , 'mean_Lz') # names for comuns in the for loop
data <- resp.data_merged %>%
dplyr::select(Date, Chamber_tank, Filename, Channel, Lpc,  Leq, Lz) %>%
dplyr::filter(!is.na(Lpc)) # ommits empty resp channels (if any)
blanks <- data.frame(data %>%
dplyr::filter(! Filename %in% 'Run_1_raw.txt') %>% # run 1 on 9/14 was restarted - I assume to ommit the previous from analysis
dplyr::group_by(Channel, Date) %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
BLANK.mean_Leq = mean(abs(Leq)),
BLANK.mean_Lz = mean(abs(Lz))) %>%
dplyr::mutate(pCO2 = case_when(
Channel == "CH8" ~ "H",
Channel == "CH4"  ~ "L")))
blanks <- blanks %>% dplyr::select(!Channel) # ommit channel to reduce confusion when merged - treatment will be merged with the resp.data.merged' dataframe
blanks
Resp.Master <- merge(resp.data_merged, blanks, by=c("Date", "pCO2")) %>% # NOTE: this repeats for every distinct length value
dplyr::mutate(resp_norm = Lpc - BLANK.mean_Lpc) # ommits respiration rate values showing an increase in O2 over time
Resp.Master_OM <- Resp.Master %>% dplyr::filter(!resp_norm > 0) # ommit respiration values that are positive
# NOTE: look at the following table to troubleshoot if needed
Resp.outliers <- Resp.Master %>% dplyr::filter(resp_norm > 0) # call the values with positive resp rates, measing they were slower than the blank!
Resp.outliers
Resp.Master_OM
# calculate resp rates
vial.vol <- 2 # milliliters (ml) - to nomalize by volume (L)
Resp.Master_OM$resp_ug_L_hr <- ( (abs(Resp.Master_OM$resp_norm)*1000)* # convert mg/L to ug/L
(vial.vol/1000)* # normalize by volume
(60)) # convert per hour from per minute
Resp_0914 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '9/14/2021') %>% # call only 9/14
dplyr::filter(! Filename %in% 'Run_1_raw.txt')
Resp_0914 %>% dplyr::group_by(Chamber_tank) %>% summarise(n()) # tank replication
mod <- aov(lm(resp_ug_L_hr~pCO2,data=Resp_0914))
summary(mod)
DF   <- paste( (summary(mod)[[1]][["Df"]])[1], (summary(mod)[[1]][["Df"]])[2], sep = '/')
Fval <- (summary(mod)[[1]][["F value"]])[1]
pval <- (summary(mod)[[1]][["Pr(>F)"]])[1]
ggplot(Resp_0914, aes(pCO2 , resp_ug_L_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("grey50","white")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.5)) +
theme_classic() +
scale_x_discrete(labels= c('Elevated (H)', 'Ambient (L)')) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
labs(title = "F1 Scallops: pediveliger respiration rates on 20210914",
y = expression(Respiration~rate~"("~mu~g~L^{-1}~O[2]%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~mu*atm~")")) +
annotate("text", x=2, y=0.35, label = "aov(Resp~Treatment + (1|Tank))") +
annotate("text", x=2, y=0.25, label= paste('DF =',DF,'F =', signif(Fval, digits=3), 'p value =', signif(pval, digits=3), sep=" "))
# model effect of treatment on resp rate 20210507
Resp_0914 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '9/14/2021') %>% # call only 9/14
dplyr::filter(! Filename %in% 'Run_1_raw.txt') %>% # run 1 on 9/14 was restarted - I assume to ommit the previous from analysis
dplyr::filter(!resp_ug_L_hr >5) # ommit outliers
Resp_0914 %>% dplyr::group_by(Chamber_tank) %>% summarise(n()) # tank replication
mod <- aov(lm(resp_ug_L_hr~pCO2,data=Resp_0914))
summary(mod)
DF   <- paste( (summary(mod)[[1]][["Df"]])[1], (summary(mod)[[1]][["Df"]])[2], sep = '/')
Fval <- (summary(mod)[[1]][["F value"]])[1]
pval <- (summary(mod)[[1]][["Pr(>F)"]])[1]
ggplot(Resp_0914, aes(pCO2 , resp_ug_L_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("grey50","white")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.5)) +
theme_classic() +
scale_x_discrete(labels= c('Elevated (H)', 'Ambient (L)')) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
labs(title = "F1 Scallops: pediveliger respiration rates on 20210914",
y = expression(Respiration~rate~"("~mu~g~L^{-1}~O[2]%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~mu*atm~")")) +
annotate("text", x=2, y=0.35, label = "aov(Resp~Treatment + (1|Tank))") +
annotate("text", x=2, y=0.25, label= paste('DF =',DF,'F =', signif(Fval, digits=3), 'p value =', signif(pval, digits=3), sep=" "))
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis/Output/Respiration/20210914_respiration.pdf"))
ggplot(Resp_0914, aes(pCO2 , resp_ug_L_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("grey50","white")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.5)) +
theme_classic() +
scale_x_discrete(labels= c('Elevated (H)', 'Ambient (L)')) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
labs(title = "F1 Scallops: pediveliger respiration rates on 20210914",
y = expression(Respiration~rate~"("~mu~g~L^{-1}~O[2]%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~mu*atm~")")) +
annotate("text", x=2, y=0.35, label = "aov(Resp~Treatment + (1|Tank))") +
annotate("text", x=2, y=0.25, label= paste('DF =',DF,'F =', signif(Fval, digits=3), 'p value =', signif(pval, digits=3), sep=" "))
dev.off()
# Analysis with the random block of Chamber_tank
mod.mixedEff = lmer(resp_ug_L_hr ~ pCO2 + (1|Chamber_tank),
data=Resp_0914,
REML=TRUE)
anova(mod.mixedEff) # same output without the random effect
rand(mod.mixedEff)
Resp_0914 %>% dplyr::group_by(Chamber_tank) %>% summarise(n()) # tank replication
# Analysis with the random block of Chamber_tank
mod.mixedEff = lmer(resp_ug_L_hr ~ pCO2 + (1|Chamber_tank),
data=Resp_0914,
REML=TRUE)
anova(mod.mixedEff) # same output without the random effect
rand(mod.mixedEff)
