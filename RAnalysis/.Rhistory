BLANK.mean_Lz = mean(abs(Lz)),
n = n())
kable(blanks_means)
blanks_means <- blanks_all_raw %>%
dplyr::group_by(Date, filetype) %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
BLANK.mean_Leq = mean(abs(Leq)),
BLANK.mean_Lz = mean(abs(Lz)),
n = n())
kable(blanks_means)
blanks_means <- blanks_all_raw %>%
dplyr::group_by(Date, filetype) %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
BLANK.sd.Lpc   = sd(abs(Lpc)),
BLANK.mean_Leq = mean(abs(Leq)),
BLANK.mean_Lz = mean(abs(Lz)),
n = n())
kable(blanks_means)
blanks_means <- blanks_all_raw %>%
dplyr::group_by(Date, pH, filetype) %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
BLANK.sd.Lpc   = sd(abs(Lpc)),
BLANK.mean_Leq = mean(abs(Leq)),
BLANK.mean_Lz = mean(abs(Lz)),
n = n())
kable(blanks_means)
blanks_means <- blanks_all_raw %>%
dplyr::group_by(Date, filetype) %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
BLANK.sd.Lpc   = sd(abs(Lpc)),
BLANK.mean_Leq = mean(abs(Leq)),
BLANK.mean_Lz = mean(abs(Lz)),
n = n())
Resp.Master <- merge(resp.data_merged, blanks_means, by=c("Date",  "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::mutate(resp_norm = Lpc - BLANK.mean_Lpc) # ommits respiration rate values showing an increase in O2 over time
Resp.Master_OM <- Resp.Master %>% dplyr::filter(!resp_norm > 0) %>% # ommit respiration values that are positive
dplyr::mutate(volume = case_when(filetype == "LoLigo_data" & Date == '9/14/2021' ~ 1.7, filetype == "LoLigo_data" & Date == '10/26/2021' ~ 40, filetype == "SDR_data" ~ 2.2)) %>% # chamber volumes on different dates with
dplyr::mutate(Age = case_when(Date == '9/14/2021' ~ 50, Date == '9/30/2021' ~ 66, Date == '10/26/2021' ~ 92)) %>%
dplyr::mutate(Fed_Unfed = case_when(Fed_Unfed == 'F' ~ "High food", is.na(Fed_Unfed) ~ "High food", Fed_Unfed == 'U' ~ "Low food")) %>%
dplyr::mutate(pCO2 = case_when(pH == 8.0 ~ "500 μatm", pH == 7.5 ~ "800 μatm"))
Resp.outliers <- Resp.Master %>% dplyr::filter(resp_norm > 0) # call the values with positive resp rates, measing they were slower than the blank!
Resp.Master_OM <- Resp.Master_OM[!is.na(Resp.Master_OM$Length_um),]
Resp.Master_OM$resp_ng_L_umlLength_hr <- (
( ( (abs(Resp.Master_OM$resp_norm)*1000000) * # call absolute value of resp in mg per minute - convert to ng min-1
(Resp.Master_OM$volume/1000) ) / # vial volume for loligo 8 channel runs was 2.2 mL!!! - correct ng minute-1 to ng liter-1 by multiplying by the resp vial in liters
Resp.Master_OM$Length_um) * # normalize by individual or larvae count - as to ng L-1 individual-1
(60)) # correct for the time; final value is ng Liter-1 individual-1 hour-1
RespSumTab <- summarySE(Resp.Master_OM, measurevar="resp_ng_L_umlLength_hr", groupvars=c("Age", "pCO2", "Fed_Unfed"))
Resp_0930 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '9/30/2021')  %>% # call only 9/14
dplyr::select(-Center)
LMmod_0930 <- aov(lm(resp_ng_L_umlLength_hr~pCO2*Fed_Unfed ,data=Resp_0930))
pander(summary(LMmod_0930), style='rmarkdown')
Resp_0930$Fed_Unfed <- as.factor(Resp_0930$Fed_Unfed)
levels(Resp_0930$Fed_Unfed) <- c("High food", "Low food")
ggplot(Resp_0930, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_ng_L_umlLength_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
ylim(0, 3) +
scale_x_discrete(labels=c('Low OA', 'Moderate OA')) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
labs(title = "Respiration rate; F1 Scallops (juveniles) 66 days post-fertilization",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%mu*m^{-1}%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~mu*atm~")")) +
facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food'))) # +
RespSumTab <- summarySE(Resp.Master_OM, measurevar="resp_ng_L_umlLength_hr", groupvars=c("Age", "pCO2", "Fed_Unfed"))
install.packages("Rmisc")
library(Rmisc)
RespSumTab <- summarySE(Resp.Master_OM, measurevar="resp_ng_L_umlLength_hr", groupvars=c("Age", "pCO2", "Fed_Unfed"))
RespSumTab$pCO2 <- factor(RespSumTab$pCO2, c("500 μatm","800 μatm"))
## Use geom_line and geom_point to plot over time
Resp_geomline<-ggplot(data=RespSumTab, aes(x=Age, y=resp_ng_L_umlLength_hr, color=pCO2)) +
geom_line(aes(linetype = factor(Fed_Unfed)), size = 0.5) +
geom_point()+
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_errorbar(aes(ymin=resp_ng_L_umlLength_hr-se, ymax=resp_ng_L_umlLength_hr+se), width=.2,
position=position_dodge(.1))+
theme_bw() +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="Age (days)") +
labs(title = "F1 Scallops: Food x OA Experiment",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%μ*m^{-1}%.% hr^{-1}~")")) +
scale_linetype_manual(values = c("High food" = "solid", "Low food" = "dashed"))  +
theme(legend.position="none") +
# facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food')))
facet_wrap(~pCO2)
Resp_geomline
# model effect of treatment on resp rate 20210507
Resp_0914 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '9/14/2021')  %>% # call only 9/14
dplyr::filter(!Chamber_tank  %in% 'blank')
LMmod_0914 <- aov(lm(resp_ng_L_umlLength_hr~pCO2,data=Resp_0914))
pander(summary(LMmod_0914), style='rmarkdown')
ggplot(Resp_0914, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_ng_L_umlLength_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
scale_x_discrete(labels= c('Low OA', 'Moderate OA')) +
ylim(0, 3) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
labs(title = "F1 Scallops: respiration rates on 20210914",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%μ*m^{-1}%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~μ*atm~")")) # +
blanks_all_raw <- data.frame(merge(resp.ref, resp.data, by = c('Date', 'Channel', 'Filename')) %>%
dplyr::mutate(filetype = str_sub(Filename, -3,-1)) %>%
dplyr::mutate(filetype = factor(ifelse(filetype == "csv", "SDR_data", "LoLigo_data"))) %>%
dplyr::filter(Chamber_tank  == 'blank') %>%
dplyr::filter(Lpc <0) %>%
dplyr::filter(!Date == '9/30/2021' | !Lpc < -0.035) %>% #omits C6 RR_9.30.21_AM_Plate_1_Run_1.csv	8.0	blank - View the Lolin plot, looks noisy and a fast outlier from the others
dplyr::filter(!Date == '10/26/2021'  | !Channel == "CH8" | !Run == "2" )) # omit a bad blank that contained a bad seal, noted on the respiration sampling day during the trial
blanks_means <- blanks_all_raw %>%
dplyr::group_by(Date, pH, filetype) %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
BLANK.sd.Lpc   = sd(abs(Lpc)),
BLANK.mean_Leq = mean(abs(Leq)),
BLANK.mean_Lz = mean(abs(Lz)),
n = n())
Resp.Master <- merge(resp.data_merged, blanks_means, by=c("Date", "pH",  "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::mutate(resp_norm = Lpc - BLANK.mean_Lpc) # ommits respiration rate values showing an increase in O2 over time
Resp.Master_OM <- Resp.Master %>% dplyr::filter(!resp_norm > 0) %>% # ommit respiration values that are positive
dplyr::mutate(volume = case_when(filetype == "LoLigo_data" & Date == '9/14/2021' ~ 1.7, filetype == "LoLigo_data" & Date == '10/26/2021' ~ 40, filetype == "SDR_data" ~ 2.2)) %>% # chamber volumes on different dates with
dplyr::mutate(Age = case_when(Date == '9/14/2021' ~ 50, Date == '9/30/2021' ~ 66, Date == '10/26/2021' ~ 92)) %>%
dplyr::mutate(Fed_Unfed = case_when(Fed_Unfed == 'F' ~ "High food", is.na(Fed_Unfed) ~ "High food", Fed_Unfed == 'U' ~ "Low food")) %>%
dplyr::mutate(pCO2 = case_when(pH == 8.0 ~ "500 μatm", pH == 7.5 ~ "800 μatm"))
Resp.Master_OM <- Resp.Master_OM[!is.na(Resp.Master_OM$Length_um),]
Resp.Master_OM$resp_ng_L_umlLength_hr <- (
( ( (abs(Resp.Master_OM$resp_norm)*1000000) * # call absolute value of resp in mg per minute - convert to ng min-1
(Resp.Master_OM$volume/1000) ) / # vial volume for loligo 8 channel runs was 2.2 mL!!! - correct ng minute-1 to ng liter-1 by multiplying by the resp vial in liters
Resp.Master_OM$Length_um) * # normalize by individual or larvae count - as to ng L-1 individual-1
(60)) # correct for the time; final value is ng Liter-1 individual-1 hour-1
RespSumTab <- summarySE(Resp.Master_OM, measurevar="resp_ng_L_umlLength_hr", groupvars=c("Age", "pCO2", "Fed_Unfed"))
RespSumTab$pCO2 <- factor(RespSumTab$pCO2, c("500 μatm","800 μatm"))
## Use geom_line and geom_point to plot over time
Resp_geomline<-ggplot(data=RespSumTab, aes(x=Age, y=resp_ng_L_umlLength_hr, color=pCO2)) +
geom_line(aes(linetype = factor(Fed_Unfed)), size = 0.5) +
geom_point()+
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_errorbar(aes(ymin=resp_ng_L_umlLength_hr-se, ymax=resp_ng_L_umlLength_hr+se), width=.2,
position=position_dodge(.1))+
theme_bw() +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="Age (days)") +
labs(title = "F1 Scallops: Food x OA Experiment",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%μ*m^{-1}%.% hr^{-1}~")")) +
scale_linetype_manual(values = c("High food" = "solid", "Low food" = "dashed"))  +
theme(legend.position="none") +
# facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food')))
facet_wrap(~pCO2)
Resp_geomline
# model effect of treatment on resp rate 20210507
Resp_0914 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '9/14/2021')  %>% # call only 9/14
dplyr::filter(!Chamber_tank  %in% 'blank')
Resp_0914 %>% dplyr::group_by(Chamber_tank) %>% dplyr::summarise(n()) # tank replication
LMmod_0914 <- aov(lm(resp_ng_L_umlLength_hr~pCO2,data=Resp_0914))
pander(summary(LMmod_0914), style='rmarkdown')
check_model(LMmod_0914) # observe the diagnostics of the model
shapiro.test(residuals(LMmod_0914)) #  normal - 0.3875
leveneTest(LMmod_0914) # good - 0.6186
ggplot(Resp_0914, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_ng_L_umlLength_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
scale_x_discrete(labels= c('Low OA', 'Moderate OA')) +
ylim(0, 3) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
labs(title = "F1 Scallops: respiration rates on 20210914",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%μ*m^{-1}%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~μ*atm~")")) # +
Resp_0930 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '9/30/2021')  %>% # call only 9/14
dplyr::select(-Center)
Resp_0930 %>% dplyr::group_by(Chamber_tank, Food ) %>% dplyr::summarise(n()) # tank replication
LMmod_0930 <- aov(lm(resp_ng_L_umlLength_hr~pCO2*Fed_Unfed ,data=Resp_0930))
pander(summary(LMmod_0930), style='rmarkdown')
check_model(LMmod_0930) # observe the diagnostics of the model
shapiro.test(residuals(LMmod_0930)) #  normal - 0.07641
leveneTest(LMmod_0930) # good - 0.1648
Resp_0930$Fed_Unfed <- as.factor(Resp_0930$Fed_Unfed)
levels(Resp_0930$Fed_Unfed) <- c("High food", "Low food")
ggplot(Resp_0930, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_ng_L_umlLength_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
ylim(0, 3) +
scale_x_discrete(labels=c('Low OA', 'Moderate OA')) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
labs(title = "Respiration rate; F1 Scallops (juveniles) 66 days post-fertilization",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%mu*m^{-1}%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~mu*atm~")")) +
facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food'))) # +
ggplot(Resp_0930, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_ng_L_umlLength_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
ylim(0, 4) +
scale_x_discrete(labels=c('Low OA', 'Moderate OA')) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
labs(title = "Respiration rate; F1 Scallops (juveniles) 66 days post-fertilization",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%mu*m^{-1}%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~mu*atm~")")) +
facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food'))) # +
Resp_01026 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '10/26/2021')  %>% # call only 10/14
dplyr::select(-Center)
Resp_01026 %>% dplyr::group_by(Chamber_tank, Food ) %>% dplyr::summarise(n()) # tank replication
LMmod_01026 <- aov(lm(resp_ng_L_umlLength_hr~pCO2*Fed_Unfed ,data=Resp_01026))
pander(summary(LMmod_01026), style='rmarkdown')
pander(summary(LMmod_0930), style='rmarkdown')
resp.data_merged[95,c(1:6)]  # 	C1 RR_9.30.21_PM_Plate_1_Run_2.csv	0.011656487	0.011656487	0.011656487  - ommit this
# load the data to run it
resp.data    <- read.csv(file="Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header=T) %>% dplyr::filter(Channel %in% "C1") # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
resp.data    <- read.csv(file="Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header=T)
resp.data
file.names.table2    <- data.frame(txt.files = (basename(path = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv",sep=''))) #%>%  dplyr::filter(grepl('raw', txt.files))#list all csv file names in the folder and subfolders
file.names.table2    <- data.frame(txt.files = (basename(path = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv"))) #%>%  dplyr::filter(grepl('raw', txt.files))#list all csv file names in the folder and subfolders
file.names.table2
folder.names.table[3,1]
Resp.Data           <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) #reads in the data files
Resp.Data
# load the data to run it
Resp.Data           <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>% dplyr::select("Time..HH.MM.SS", "C1..Oxygen.") #reads in the data files
# load the data to run it
Resp.Data           <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>% dplyr::select(c("Time..HH.MM.SS", "C1..Oxygen.")) #reads in the data files
# load the data to run it
Resp.Data           <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>% dplyr::select(c("Relative.time..HH.MM.SS.", "C1..Oxygen.")) #reads in the data files
Resp.Data
# load the data to run it
Resp.Data           <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>%
dplyr::select(c("Relative.time..HH.MM.SS.", "C1..Oxygen.")) #reads in the data files
# load the data to run it
Resp.Data           <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>%
dplyr::select(c("Relative.time..HH.MM.SS.", "C1..Oxygen.")) %>%  #reads in the data files
dplyr::mutate(mgL =  DO.unit.convert(as.numeric("C1..Oxygen."),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))
library(rMR)
# load the data to run it
Resp.Data           <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>%
dplyr::select(c("Relative.time..HH.MM.SS.", "C1..Oxygen.")) %>%  #reads in the data files
dplyr::mutate(mgL =  DO.unit.convert(as.numeric("C1..Oxygen."),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))
Resp.Data
read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>%
dplyr::select(c("Relative.time..HH.MM.SS.", "C1..Oxygen."))
read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51)
# load the data to run it
Resp.Data           <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>%
dplyr::select(c("Relative.time..HH.MM.SS.", "C1..Oxygen.")) %>%  #reads in the data files
dplyr::mutate(mgL =  C1..Oxygen.)
# load the data to run it
resp_rerun          <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>%
dplyr::select(c("Relative.time..HH.MM.SS.", "C1..Oxygen.")) %>%  #reads in the data files
dplyr::mutate(mgL =  C1..Oxygen.) %>%
resp_rerun$date      <- paste((sub("2021.*", "", resp_rerun$Date..DD.MM.YYYY.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
# load the data to run it
resp_rerun          <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>%
dplyr::select(c("Relative.time..HH.MM.SS.", "C1..Oxygen.")) %>%  #reads in the data files
dplyr::mutate(mgL =  C1..Oxygen.) %>%
resp_rerun$date      <- paste((sub("2021.*", "", resp_rerun$Date..DD.MM.YYYY.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
# load the data to run it
resp_rerun          <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>%
dplyr::select(c("Relative.time..HH.MM.SS.", "C1..Oxygen.")) %>%  #reads in the data files
dplyr::mutate(mgL =  C1..Oxygen.)
resp_rerun$date      <- paste((sub("2021.*", "", resp_rerun$Date..DD.MM.YYYY.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
resp_rerun$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", resp_rerun$Time..HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
library(lubridate)
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
resp_rerun$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", resp_rerun$Time..HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
resp_rerun$seconds   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])    # secs - calc the sec time series
# load the data to run it
resp_rerun          <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>%
dplyr::select(c("Relative.time..HH.MM.SS.", "C1..Oxygen.")) %>%  #reads in the data files
dplyr::mutate(mgL =  C1..Oxygen.)
resp_rerun$date      <- paste((sub("2021.*", "", resp_rerun$Date..DD.MM.YYYY.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
resp_rerun$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", resp_rerun$Time..HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
resp_rerun$date
# load the data to run it
resp_rerun          <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51) %>%
dplyr::select(c("Relative.time..HH.MM.SS.", "C1..Oxygen.")) %>%  #reads in the data files
dplyr::mutate(mgL =  C1..Oxygen.)
resp_rerun$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", resp_rerun$Time..HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
resp_rerun$Time..HH.MM.SS.
resp_rerun
# load the data to run it
resp_rerun          <- read.csv(file = "Data/Respiration/20210930/RR_9.30.21_PM_Plate_1_Run_2.csv", header = TRUE,skip = 51)# %>%
resp_rerun$date      <- paste((sub("2021.*", "", resp_rerun$Date..DD.MM.YYYY.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
resp_rerun$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", resp_rerun$Time..HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
resp_rerun$seconds   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])    # secs - calc the sec time series
resp_rerun$minutes   <- (resp_rerun$time_Sec - resp_rerun$time_Sec[1])/60 # mins - calc the minute time series
resp_rerun_LoLin <- resp_rerun %>% dplyr::select(c("minutes", "C1..Oxygen."))
resp_rerun_LoLin <- resp_rerun %>% dplyr::select(c("minutes", "C1..Oxygen.")) %>% dplyr::filter(minutes < 15)
model <- rankLocReg(
xall    = as.numeric(resp_rerun_LoLin[, 1]),
yall    = as.numeric(resp_rerun_LoLin[, 2]), # call x as the minute timeseries and y as the mg L-1 O2
alpha   = a,  # alpha was assigned earlier as 0.4 by the authors default suggestions - review Olito et al. and their github page for details
method  = "pc",
verbose = TRUE)
model <- rankLocReg(
xall    = as.numeric(resp_rerun_LoLin[, 1]),
yall    = as.numeric(resp_rerun_LoLin[, 2]), # call x as the minute timeseries and y as the mg L-1 O2
alpha   = 0.4,  # alpha was assigned earlier as 0.4 by the authors default suggestions - review Olito et al. and their github page for details
method  = "pc",
verbose = TRUE)
plot(model)
resp_rerun_LoLin <- resp_rerun %>% dplyr::select(c("minutes", "C1..Oxygen.")) %>% dplyr::filter(minutes < 20)
model <- rankLocReg(
xall    = as.numeric(resp_rerun_LoLin[, 1]),
yall    = as.numeric(resp_rerun_LoLin[, 2]), # call x as the minute timeseries and y as the mg L-1 O2
alpha   = 0.4,  # alpha was assigned earlier as 0.4 by the authors default suggestions - review Olito et al. and their github page for details
method  = "pc",
verbose = TRUE)
plot(model)
resp.data_merged[95,4] <- -0.0296 # 20210930_Plate_1_Run_2_C1_regression - plot shows noice after the 20 minutes mark, we reran this at the end of the LoLin script, insert here!
resp.data_merged[95,c(1:6)]
Resp.Master <- merge(resp.data_merged, blanks_means, by=c("Date", "pH",  "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::mutate(resp_norm = Lpc - BLANK.mean_Lpc) # ommits respiration rate values showing an increase in O2 over time
Resp.Master_OM <- Resp.Master %>% dplyr::filter(!resp_norm > 0) %>% # ommit respiration values that are positive
dplyr::mutate(volume = case_when(filetype == "LoLigo_data" & Date == '9/14/2021' ~ 1.7, filetype == "LoLigo_data" & Date == '10/26/2021' ~ 40, filetype == "SDR_data" ~ 2.2)) %>% # chamber volumes on different dates with
dplyr::mutate(Age = case_when(Date == '9/14/2021' ~ 50, Date == '9/30/2021' ~ 66, Date == '10/26/2021' ~ 92)) %>%
dplyr::mutate(Fed_Unfed = case_when(Fed_Unfed == 'F' ~ "High food", is.na(Fed_Unfed) ~ "High food", Fed_Unfed == 'U' ~ "Low food")) %>%
dplyr::mutate(pCO2 = case_when(pH == 8.0 ~ "500 μatm", pH == 7.5 ~ "800 μatm"))
Resp.outliers <- Resp.Master %>% dplyr::filter(resp_norm > 0) # call the values with positive resp rates, measing they were slower than the blank!
write.csv(Resp.Master_OM, "C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis/Output/Respiration/Calculated_Resp_Master.csv")
write.csv(Resp.Master_OM, "C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis/Output/Respiration/Calculated_Resp_Master.csv")
write.csv(Resp.Master_OM, "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Output/Respiration/Calculated_Resp_Master.csv")
M
Resp.Master_OM <- Resp.Master_OM[!is.na(Resp.Master_OM$Length_um),]
Resp.Master_OM$resp_ng_L_umlLength_hr <- (
( ( (abs(Resp.Master_OM$resp_norm)*1000000) * # call absolute value of resp in mg per minute - convert to ng min-1
(Resp.Master_OM$volume/1000) ) / # vial volume for loligo 8 channel runs was 2.2 mL!!! - correct ng minute-1 to ng liter-1 by multiplying by the resp vial in liters
Resp.Master_OM$Length_um) * # normalize by individual or larvae count - as to ng L-1 individual-1
(60)) # correct for the time; final value is ng Liter-1 individual-1 hour-1
Resp_0930 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '9/30/2021')  %>% # call only 9/14
dplyr::select(-Center)
Resp_0930 %>% dplyr::group_by(Chamber_tank, Food ) %>% dplyr::summarise(n()) # tank replication
LMmod_0930 <- aov(lm(resp_ng_L_umlLength_hr~pCO2*Fed_Unfed ,data=Resp_0930))
pander(summary(LMmod_0930), style='rmarkdown')
check_model(LMmod_0930) # observe the diagnostics of the model
shapiro.test(residuals(LMmod_0930)) #  normal - 0.07641
leveneTest(LMmod_0930) # good - 0.1648
DF_pCO2   <- paste( (summary(LMmod_0930)[[1]][["Df"]])[1], (summary(LMmod_0930)[[1]][["Df"]])[4], sep = '/')
Fval_pCO2 <- (summary(LMmod_0930)[[1]][["F value"]])[1]
pval_pCO2 <- (summary(LMmod_0930)[[1]][["Pr(>F)"]])[1]
DF_Fed    <- paste( (summary(LMmod_0930)[[1]][["Df"]])[2], (summary(LMmod_0930)[[1]][["Df"]])[4], sep = '/')
Fval_Fed  <- (summary(LMmod_0930)[[1]][["F value"]])[2]
pval_Fed  <- (summary(LMmod_0930)[[1]][["Pr(>F)"]])[2]
Resp_0930$Fed_Unfed <- as.factor(Resp_0930$Fed_Unfed)
levels(Resp_0930$Fed_Unfed) <- c("High food", "Low food")
ggplot(Resp_0930, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_ng_L_umlLength_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
ylim(0, 4) +
scale_x_discrete(labels=c('Low OA', 'Moderate OA')) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
labs(title = "Respiration rate; F1 Scallops (juveniles) 66 days post-fertilization",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%mu*m^{-1}%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~mu*atm~")")) +
facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food'))) # +
pander(summary(LMmod_0930), style='rmarkdown')
LMmod_0914 <- aov(lm(resp_ng_L_umlLength_hr~pCO2,data=Resp_0914))
pander(summary(LMmod_0914), style='rmarkdown')
Resp_01026 <- Resp.Master_OM %>%
dplyr::filter(Date %in% '10/26/2021')  %>% # call only 10/14
dplyr::select(-Center)
Resp_01026 %>% dplyr::group_by(Chamber_tank, Food ) %>% dplyr::summarise(n()) # tank replication
LMmod_01026 <- aov(lm(resp_ng_L_umlLength_hr~pCO2*Fed_Unfed ,data=Resp_01026))
pander(summary(LMmod_01026), style='rmarkdown')
Resp_0930$Fed_Unfed <- as.factor(Resp_0930$Fed_Unfed)
levels(Resp_0930$Fed_Unfed) <- c("High food", "Low food")
ggplot(Resp_0930, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_ng_L_umlLength_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
ylim(0, 4) +
scale_x_discrete(labels=c('Low OA', 'Moderate OA')) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
labs(title = "Respiration rate; F1 Scallops (juveniles) 66 days post-fertilization",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%mu*m^{-1}%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~mu*atm~")")) +
facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food'))) # +
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis/Output/Respiration/20210930_respiration.pdf"))
pdf(paste0("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Output/Respiration/20210930_respiration.pdf"))
ggplot(Resp_0930, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_ng_L_umlLength_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
ylim(0, 4) +
scale_x_discrete(labels=c('Low OA', 'Moderate OA')) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
labs(title = "Respiration rate; F1 Scallops (juveniles) 66 days post-fertilization",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%mu*m^{-1}%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~mu*atm~")")) +
facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food'))) # +
dev.off()
pdf(paste0("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Output/Respiration/202101026_respiration.pdf"))
ggplot(Resp_01026, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_ng_L_umlLength_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
#ylim(0, 3) +
scale_x_discrete(labels=c('~500 μatm', '~800 μatm')) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
labs(title = "Respiration rate; F1 Scallops (juveniles) 92 days post-fertilization",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%mu*m^{-1}%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~mu*atm~")")) +
facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food'))) # +
dev.off()
#
ggplot(Resp_01026, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_ng_L_umlLength_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
#ylim(0, 3) +
scale_x_discrete(labels=c('~500 μatm', '~800 μatm')) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
labs(title = "Respiration rate; F1 Scallops (juveniles) 92 days post-fertilization",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%mu*m^{-1}%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~mu*atm~")")) +
facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food'))) # +
pdf(paste0("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Output/Respiration/20210914_respiration.pdf"))
ggplot(Resp_0914, aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_ng_L_umlLength_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
scale_x_discrete(labels= c('Low OA', 'Moderate OA')) +
ylim(0, 3) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
labs(title = "F1 Scallops: respiration rates on 20210914",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%μ*m^{-1}%.% hr^{-1}~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~μ*atm~")")) # +
# annotate("text", x=1.2, y=2.8, size = 4, label = "aov(Resp~pCO2)") +
# annotate("text", x=1.2, y=2.6, size = 4, label= paste('DF =',DF,'F =', signif(Fval, digits=3), 'p value =', signif(pval, digits=3), sep=" "))
dev.off()
RespSumTab <- summarySE(Resp.Master_OM, measurevar="resp_ng_L_umlLength_hr", groupvars=c("Age", "pCO2", "Fed_Unfed"))
RespSumTab$pCO2 <- factor(RespSumTab$pCO2, c("500 μatm","800 μatm"))
## Use geom_line and geom_point to plot over time
Resp_geomline<-ggplot(data=RespSumTab, aes(x=Age, y=resp_ng_L_umlLength_hr, color=pCO2)) +
geom_line(aes(linetype = factor(Fed_Unfed)), size = 0.5) +
geom_point()+
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_errorbar(aes(ymin=resp_ng_L_umlLength_hr-se, ymax=resp_ng_L_umlLength_hr+se), width=.2,
position=position_dodge(.1))+
theme_bw() +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="Age (days)") +
labs(title = "F1 Scallops: Food x OA Experiment",
y = expression(Respiration~rate~"("~ng~L^{-1}~O[2]%.%μ*m^{-1}%.% hr^{-1}~")")) +
scale_linetype_manual(values = c("High food" = "solid", "Low food" = "dashed"))  +
theme(legend.position="none") +
# facet_wrap(~factor(Fed_Unfed, level = c('Low food', 'High food')))
facet_wrap(~pCO2)
pdf(paste0("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Output/Respiration/Juvenile_respiration_FoodxOA.pdf"))
Resp_geomline
dev.off()
Resp.Master_OM
