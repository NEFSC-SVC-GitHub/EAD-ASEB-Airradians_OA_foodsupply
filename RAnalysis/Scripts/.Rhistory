dplyr::filter(minutes %in% 90) %>%
dplyr::mutate(Blank = if(pH == 7.5) AlgaeBlank_914_pH7.5 else AlgaeBlank_914_pH8.0 ) %>%
dplyr::mutate(TotalAlgaeLossRatio = C0_total_algae / as.numeric(total_algae) ) %>%
dplyr::filter(!TotalAlgaeLossRatio < 1) %>%
dplyr::mutate(ln_TotalAlgaeLossRatio = ln(TotalAlgaeLossRatio)) %>%
# dplyr::mutate(ClearanceRate =  ( (25/1000) / (diff/60)  * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
#                                   ( ln_AlgaeLossRatio ) / Length.um. ) ) %>%
dplyr::mutate(ClearanceRate_L_hour_mm = ( (25/1000) * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
(( ln_TotalAlgaeLossRatio /  (as.numeric(minutes)/60) - Blank))) / (Length_um/1000) ) %>%
dplyr::mutate(Time_period = paste((as.numeric(substr(minutes,1,2)) -1), "0-", minutes, sep =''))
dat2OM <- dat2 %>% dplyr::filter(!minutes == 0)
if (nrow(dat2OM) > 0) {
ClearRate.table           <- data.frame(matrix(nrow = nrow(dat2OM), ncol = 10)) # create dataframe to save cumunalitively during for loop
colnames(ClearRate.table) <- c('Date', 'ID', 'pH', 'Replicate', 'Num','Run', 'Fed_Unfed', 'Time_period', 'TotalAlgaeLossRatio', 'ClearanceRate_L_hour_mm') # names for comuns in the for loop
ClearRate.table$Date                       <- dat2OM$Date
ClearRate.table$ID                         <- loop_914[i,]
ClearRate.table$pH                         <- gsub("_.*", "\\1", ClearRate.table$ID)
ClearRate.table$Fed_Unfed                  <- NA
ClearRate.table$Replicate                  <- gsub("^(?:[^_]+_){4}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Num                        <- gsub("^(?:[^_]+_){6}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Run                        <- gsub("^(?:[^_]+_){2}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Time_period                <- paste( "0-", dat2OM$Time._min, sep ='')
ClearRate.table$TotalAlgaeLossRatio             <- dat2OM$TotalAlgaeLossRatio
ClearRate.table$ClearanceRate_L_hour_mm <- dat2OM$ClearanceRate_L_hour_mm
df       <- data.frame(ClearRate.table) # name dataframe for this single row
df_total.914 <- rbind(df_total.914,df) #bind to a cumulative list dataframe
#print(df_total.914) # print to monitor progress
}
else {}
}
df_total.914
df_total.914              <- data.frame() # start dataframe
for (i in 1:nrow(loop_914)) {
dat <- ClearRate_Master.914 %>%
dplyr::filter(uniq_Identifier == loop_914[i,]) %>%
dplyr::arrange(minutes)
C0_total_algae <- dat[1,]$total_algae
dat2 <- dat %>%
#dplyr::mutate(diff = as.numeric(Time._min) - lag(as.numeric(Time._min), default = first(as.numeric(Time._min)))) %>%
dplyr::filter(minutes %in% 90) %>%
dplyr::mutate(Blank = if(pH == 7.5) AlgaeBlank_914_pH7.5 else AlgaeBlank_914_pH8.0 ) %>%
dplyr::mutate(TotalAlgaeLossRatio = C0_total_algae / as.numeric(total_algae) ) %>%
dplyr::filter(!TotalAlgaeLossRatio < 1) %>%
dplyr::mutate(ln_TotalAlgaeLossRatio = ln(TotalAlgaeLossRatio)) %>%
# dplyr::mutate(ClearanceRate =  ( (25/1000) / (diff/60)  * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
#                                   ( ln_AlgaeLossRatio ) / Length.um. ) ) %>%
dplyr::mutate(ClearanceRate_L_hour_mm = ( (25/1000) * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
(( ln_TotalAlgaeLossRatio /  (as.numeric(minutes)/60) - Blank))) / (Length_um/1000) ) %>%
dplyr::mutate(Time_period =  minutes)
dat2OM <- dat2 %>% dplyr::filter(!minutes == 0)
if (nrow(dat2OM) > 0) {
ClearRate.table           <- data.frame(matrix(nrow = nrow(dat2OM), ncol = 10)) # create dataframe to save cumunalitively during for loop
colnames(ClearRate.table) <- c('Date', 'ID', 'pH', 'Replicate', 'Num','Run', 'Fed_Unfed', 'Time_period', 'TotalAlgaeLossRatio', 'ClearanceRate_L_hour_mm') # names for comuns in the for loop
ClearRate.table$Date                       <- dat2OM$Date
ClearRate.table$ID                         <- loop_914[i,]
ClearRate.table$pH                         <- gsub("_.*", "\\1", ClearRate.table$ID)
ClearRate.table$Fed_Unfed                  <- NA
ClearRate.table$Replicate                  <- gsub("^(?:[^_]+_){4}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Num                        <- gsub("^(?:[^_]+_){6}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Run                        <- gsub("^(?:[^_]+_){2}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Time_period                <- paste( "0-", dat2OM$Time._min, sep ='')
ClearRate.table$TotalAlgaeLossRatio             <- dat2OM$TotalAlgaeLossRatio
ClearRate.table$ClearanceRate_L_hour_mm <- dat2OM$ClearanceRate_L_hour_mm
df       <- data.frame(ClearRate.table) # name dataframe for this single row
df_total.914 <- rbind(df_total.914,df) #bind to a cumulative list dataframe
#print(df_total.914) # print to monitor progress
}
else {}
}
df_total.914
dat2 <- dat %>%
#dplyr::mutate(diff = as.numeric(Time._min) - lag(as.numeric(Time._min), default = first(as.numeric(Time._min)))) %>%
dplyr::filter(minutes %in% 90) %>%
dplyr::mutate(Blank = if(pH == 7.5) AlgaeBlank_914_pH7.5 else AlgaeBlank_914_pH8.0 ) %>%
dplyr::mutate(TotalAlgaeLossRatio = C0_total_algae / as.numeric(total_algae) ) %>%
dplyr::filter(!TotalAlgaeLossRatio < 1) %>%
dplyr::mutate(ln_TotalAlgaeLossRatio = ln(TotalAlgaeLossRatio)) %>%
# dplyr::mutate(ClearanceRate =  ( (25/1000) / (diff/60)  * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
#                                   ( ln_AlgaeLossRatio ) / Length.um. ) ) %>%
dplyr::mutate(ClearanceRate_L_hour_mm = ( (25/1000) * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
(( ln_TotalAlgaeLossRatio /  (as.numeric(minutes)/60) - Blank))) / (Length_um/1000) ) %>%
dplyr::mutate(Time_period == minutes)
dat2 <- dat %>%
#dplyr::mutate(diff = as.numeric(Time._min) - lag(as.numeric(Time._min), default = first(as.numeric(Time._min)))) %>%
dplyr::filter(minutes %in% 90) %>%
dplyr::mutate(Blank = if(pH == 7.5) AlgaeBlank_914_pH7.5 else AlgaeBlank_914_pH8.0 ) %>%
dplyr::mutate(TotalAlgaeLossRatio = C0_total_algae / as.numeric(total_algae) ) %>%
dplyr::filter(!TotalAlgaeLossRatio < 1) %>%
dplyr::mutate(ln_TotalAlgaeLossRatio = ln(TotalAlgaeLossRatio)) %>%
# dplyr::mutate(ClearanceRate =  ( (25/1000) / (diff/60)  * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
#                                   ( ln_AlgaeLossRatio ) / Length.um. ) ) %>%
dplyr::mutate(ClearanceRate_L_hour_mm = ( (25/1000) * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
(( ln_TotalAlgaeLossRatio /  (as.numeric(minutes)/60) - Blank))) / (Length_um/1000) ) %>%
dplyr::mutate(Time_period = minutes)
dat2
df_total.914              <- data.frame() # start dataframe
for (i in 1:nrow(loop_914)) {
dat <- ClearRate_Master.914 %>%
dplyr::filter(uniq_Identifier == loop_914[i,]) %>%
dplyr::arrange(minutes)
C0_total_algae <- dat[1,]$total_algae
dat2 <- dat %>%
#dplyr::mutate(diff = as.numeric(Time._min) - lag(as.numeric(Time._min), default = first(as.numeric(Time._min)))) %>%
dplyr::filter(minutes %in% 90) %>%
dplyr::mutate(Blank = if(pH == 7.5) AlgaeBlank_914_pH7.5 else AlgaeBlank_914_pH8.0 ) %>%
dplyr::mutate(TotalAlgaeLossRatio = C0_total_algae / as.numeric(total_algae) ) %>%
dplyr::filter(!TotalAlgaeLossRatio < 1) %>%
dplyr::mutate(ln_TotalAlgaeLossRatio = ln(TotalAlgaeLossRatio)) %>%
# dplyr::mutate(ClearanceRate =  ( (25/1000) / (diff/60)  * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
#                                   ( ln_AlgaeLossRatio ) / Length.um. ) ) %>%
dplyr::mutate(ClearanceRate_L_hour_mm = ( (25/1000) * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
(( ln_TotalAlgaeLossRatio /  (as.numeric(minutes)/60) - Blank))) / (Length_um/1000) ) %>%
dplyr::mutate(Time_period = minutes)
dat2OM <- dat2 %>% dplyr::filter(!minutes == 0)
if (nrow(dat2OM) > 0) {
ClearRate.table           <- data.frame(matrix(nrow = nrow(dat2OM), ncol = 10)) # create dataframe to save cumunalitively during for loop
colnames(ClearRate.table) <- c('Date', 'ID', 'pH', 'Replicate', 'Num','Run', 'Fed_Unfed', 'Time_period', 'TotalAlgaeLossRatio', 'ClearanceRate_L_hour_mm') # names for comuns in the for loop
ClearRate.table$Date                       <- dat2OM$Date
ClearRate.table$ID                         <- loop_914[i,]
ClearRate.table$pH                         <- gsub("_.*", "\\1", ClearRate.table$ID)
ClearRate.table$Fed_Unfed                  <- NA
ClearRate.table$Replicate                  <- gsub("^(?:[^_]+_){4}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Num                        <- gsub("^(?:[^_]+_){6}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Run                        <- gsub("^(?:[^_]+_){2}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Time_period                <- paste( "0-", dat2OM$Time._min, sep ='')
ClearRate.table$TotalAlgaeLossRatio             <- dat2OM$TotalAlgaeLossRatio
ClearRate.table$ClearanceRate_L_hour_mm <- dat2OM$ClearanceRate_L_hour_mm
df       <- data.frame(ClearRate.table) # name dataframe for this single row
df_total.914 <- rbind(df_total.914,df) #bind to a cumulative list dataframe
#print(df_total.914) # print to monitor progress
}
else {}
}
df_total.914
dat2
paste( (dat[1,]$minutes),minutes, sep ='')
paste( (dat[1,]$minutes),minutes, sep ='-'))
paste( (dat[1,]$minutes),dat$minutes, sep ='-'))
dat$minutes
paste( (dat[1,]$minutes),as.numeric(dat$minutes), sep ='-'))
paste( (dat[1,]$minutes),as.numeric(dat$minutes), sep ='-')
df_total.914              <- data.frame() # start dataframe
for (i in 1:nrow(loop_914)) {
dat <- ClearRate_Master.914 %>%
dplyr::filter(uniq_Identifier == loop_914[i,]) %>%
dplyr::arrange(minutes)
C0_total_algae <- dat[1,]$total_algae
dat2 <- dat %>%
#dplyr::mutate(diff = as.numeric(Time._min) - lag(as.numeric(Time._min), default = first(as.numeric(Time._min)))) %>%
dplyr::filter(minutes %in% 90) %>%
dplyr::mutate(Blank = if(pH == 7.5) AlgaeBlank_914_pH7.5 else AlgaeBlank_914_pH8.0 ) %>%
dplyr::mutate(TotalAlgaeLossRatio = C0_total_algae / as.numeric(total_algae) ) %>%
dplyr::filter(!TotalAlgaeLossRatio < 1) %>%
dplyr::mutate(ln_TotalAlgaeLossRatio = ln(TotalAlgaeLossRatio)) %>%
# dplyr::mutate(ClearanceRate =  ( (25/1000) / (diff/60)  * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
#                                   ( ln_AlgaeLossRatio ) / Length.um. ) ) %>%
dplyr::mutate(ClearanceRate_L_hour_mm = ( (25/1000) * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
(( ln_TotalAlgaeLossRatio /  (as.numeric(minutes)/60) - Blank))) / (Length_um/1000) ) %>%
dplyr::mutate(Time_period = paste( (dat[1,]$minutes),as.numeric(dat$minutes), sep ='-'))
dat2OM <- dat2 %>% dplyr::filter(!minutes == 0)
if (nrow(dat2OM) > 0) {
ClearRate.table           <- data.frame(matrix(nrow = nrow(dat2OM), ncol = 10)) # create dataframe to save cumunalitively during for loop
colnames(ClearRate.table) <- c('Date', 'ID', 'pH', 'Replicate', 'Num','Run', 'Fed_Unfed', 'Time_period', 'TotalAlgaeLossRatio', 'ClearanceRate_L_hour_mm') # names for comuns in the for loop
ClearRate.table$Date                       <- dat2OM$Date
ClearRate.table$ID                         <- loop_914[i,]
ClearRate.table$pH                         <- gsub("_.*", "\\1", ClearRate.table$ID)
ClearRate.table$Fed_Unfed                  <- NA
ClearRate.table$Replicate                  <- gsub("^(?:[^_]+_){4}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Num                        <- gsub("^(?:[^_]+_){6}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Run                        <- gsub("^(?:[^_]+_){2}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Time_period                <- paste( "0-", dat2OM$Time._min, sep ='')
ClearRate.table$TotalAlgaeLossRatio             <- dat2OM$TotalAlgaeLossRatio
ClearRate.table$ClearanceRate_L_hour_mm <- dat2OM$ClearanceRate_L_hour_mm
df       <- data.frame(ClearRate.table) # name dataframe for this single row
df_total.914 <- rbind(df_total.914,df) #bind to a cumulative list dataframe
#print(df_total.914) # print to monitor progress
}
else {}
}
df_total.914              <- data.frame() # start dataframe
for (i in 1:nrow(loop_914)) {
dat <- ClearRate_Master.914 %>%
dplyr::filter(uniq_Identifier == loop_914[i,]) %>%
dplyr::arrange(minutes)
C0_total_algae <- dat[1,]$total_algae
dat2 <- dat %>%
#dplyr::mutate(diff = as.numeric(Time._min) - lag(as.numeric(Time._min), default = first(as.numeric(Time._min)))) %>%
dplyr::filter(minutes %in% 90) %>%
dplyr::mutate(Blank = if(pH == 7.5) AlgaeBlank_914_pH7.5 else AlgaeBlank_914_pH8.0 ) %>%
dplyr::mutate(TotalAlgaeLossRatio = C0_total_algae / as.numeric(total_algae) ) %>%
dplyr::filter(!TotalAlgaeLossRatio < 1) %>%
dplyr::mutate(ln_TotalAlgaeLossRatio = ln(TotalAlgaeLossRatio)) %>%
# dplyr::mutate(ClearanceRate =  ( (25/1000) / (diff/60)  * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
#                                   ( ln_AlgaeLossRatio ) / Length.um. ) ) %>%
dplyr::mutate(ClearanceRate_L_hour_mm = ( (25/1000) * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
(( ln_TotalAlgaeLossRatio /  (as.numeric(minutes)/60) - Blank))) / (Length_um/1000) ) %>%
dplyr::mutate(Time_period = paste( (dat[1,]$minutes),as.numeric(minutes), sep ='-'))
dat2OM <- dat2 %>% dplyr::filter(!minutes == 0)
if (nrow(dat2OM) > 0) {
ClearRate.table           <- data.frame(matrix(nrow = nrow(dat2OM), ncol = 10)) # create dataframe to save cumunalitively during for loop
colnames(ClearRate.table) <- c('Date', 'ID', 'pH', 'Replicate', 'Num','Run', 'Fed_Unfed', 'Time_period', 'TotalAlgaeLossRatio', 'ClearanceRate_L_hour_mm') # names for comuns in the for loop
ClearRate.table$Date                       <- dat2OM$Date
ClearRate.table$ID                         <- loop_914[i,]
ClearRate.table$pH                         <- gsub("_.*", "\\1", ClearRate.table$ID)
ClearRate.table$Fed_Unfed                  <- NA
ClearRate.table$Replicate                  <- gsub("^(?:[^_]+_){4}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Num                        <- gsub("^(?:[^_]+_){6}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Run                        <- gsub("^(?:[^_]+_){2}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Time_period                <- paste( "0-", dat2OM$Time._min, sep ='')
ClearRate.table$TotalAlgaeLossRatio             <- dat2OM$TotalAlgaeLossRatio
ClearRate.table$ClearanceRate_L_hour_mm <- dat2OM$ClearanceRate_L_hour_mm
df       <- data.frame(ClearRate.table) # name dataframe for this single row
df_total.914 <- rbind(df_total.914,df) #bind to a cumulative list dataframe
#print(df_total.914) # print to monitor progress
}
else {}
}
df_total.914
ClearRate.table
df_total.914              <- data.frame() # start dataframe
for (i in 1:nrow(loop_914)) {
dat <- ClearRate_Master.914 %>%
dplyr::filter(uniq_Identifier == loop_914[i,]) %>%
dplyr::arrange(minutes)
C0_total_algae <- dat[1,]$total_algae
dat2 <- dat %>%
#dplyr::mutate(diff = as.numeric(Time._min) - lag(as.numeric(Time._min), default = first(as.numeric(Time._min)))) %>%
dplyr::filter(minutes %in% 90) %>%
dplyr::mutate(Blank = if(pH == 7.5) AlgaeBlank_914_pH7.5 else AlgaeBlank_914_pH8.0 ) %>%
dplyr::mutate(TotalAlgaeLossRatio = C0_total_algae / as.numeric(total_algae) ) %>%
dplyr::filter(!TotalAlgaeLossRatio < 1) %>%
dplyr::mutate(ln_TotalAlgaeLossRatio = ln(TotalAlgaeLossRatio)) %>%
# dplyr::mutate(ClearanceRate =  ( (25/1000) / (diff/60)  * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
#                                   ( ln_AlgaeLossRatio ) / Length.um. ) ) %>%
dplyr::mutate(ClearanceRate_L_hour_mm = ( (25/1000) * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
(( ln_TotalAlgaeLossRatio /  (as.numeric(minutes)/60) - Blank))) / (Length_um/1000) ) %>%
dplyr::mutate(Time_period = paste( (dat[1,]$minutes),as.numeric(minutes), sep ='-'))
dat2OM <- dat2 %>% dplyr::filter(!minutes == 0)
if (nrow(dat2OM) > 0) {
ClearRate.table           <- data.frame(matrix(nrow = nrow(dat2OM), ncol = 10)) # create dataframe to save cumunalitively during for loop
colnames(ClearRate.table) <- c('Date', 'ID', 'pH', 'Replicate', 'Num','Run', 'Fed_Unfed', 'Time_period', 'TotalAlgaeLossRatio', 'ClearanceRate_L_hour_mm') # names for comuns in the for loop
ClearRate.table$Date                       <- dat2OM$Date
ClearRate.table$ID                         <- loop_914[i,]
ClearRate.table$pH                         <- gsub("_.*", "\\1", ClearRate.table$ID)
ClearRate.table$Fed_Unfed                  <- NA
ClearRate.table$Replicate                  <- gsub("^(?:[^_]+_){4}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Num                        <- gsub("^(?:[^_]+_){6}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Run                        <- gsub("^(?:[^_]+_){2}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Time_period                <- dat2OM$Time_period
ClearRate.table$TotalAlgaeLossRatio             <- dat2OM$TotalAlgaeLossRatio
ClearRate.table$ClearanceRate_L_hour_mm <- dat2OM$ClearanceRate_L_hour_mm
df       <- data.frame(ClearRate.table) # name dataframe for this single row
df_total.914 <- rbind(df_total.914,df) #bind to a cumulative list dataframe
#print(df_total.914) # print to monitor progress
}
else {}
}
df_total.914
ClearRates_914_Means <- df_total.914 %>%
#dplyr::filter(!ClearanceRate_L_hour_meter %in% '-Inf') %>%
dplyr::group_by(pH) %>%
dplyr::summarise(
meanCR = mean(ClearanceRate_L_hour_mm),
sdCR   = sd(ClearanceRate_L_hour_mm),
seCR   = sd(ClearanceRate_L_hour_mm) / sqrt(length(ClearanceRate_L_hour_mm)),
n = n()) %>%
na.omit()
print(ClearRates_914_Means)
mod914CR <- aov(lm(ClearanceRate_L_hour_mm~ pH , data = (df_total.914 %>%  dplyr::filter(!ClearanceRate_L_hour_mm  < 0)) ) )
pander(summary(mod914CR), style='rmarkdown')
check_model(mod914CR) # observe the diagnostics of the model
shapiro.test(residuals(mod914CR)) # non normal
leveneTest(mod914CR) # good
CR_914_barplot <- ClearRates_914_Means %>%
#dplyr::filter(!Time_period %in% c('40-50', '50-60')) %>%
ggplot(aes(x=pH , y=meanCR, fill = pH)) +
geom_bar(position=position_dodge(), aes(y=meanCR), stat="identity", alpha=0.5) +
#scale_fill_manual("Treatment", values = c("8" = "grey50", "7.5" = "black")) +
scale_fill_manual(values=c("grey85","grey50")) +
scale_x_discrete(labels=c('~500 μatm', '~800 μatm')) +
geom_errorbar(position=position_dodge(width=0.9), aes(ymin=meanCR+seCR, ymax=meanCR+seCR), width=0.2, colour="black", alpha=0.9, size=0.2) +
geom_linerange(aes(ymin = meanCR, ymax = meanCR+seCR)) +
geom_point(position=position_dodge(width=0.9), aes(y=meanCR)) +
theme_classic() +
ggtitle("Clearance Rate, F1 Scallops 20210914 (0-90 minutes)") # +
# facet_wrap(~Time_period)
CR_914_barplot
CR_914_boxplot <- df_total.914 %>%
#dplyr::filter(!ClearanceRate_L_hour_mm %in% '-Inf') %>%
#dplyr::filter(!Time_period %in% c('40-50', '50-60')) %>%
ggplot(aes(pH , ClearanceRate_L_hour_mm , fill = pH)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pH)) +
scale_fill_manual(values=c("white","grey50")) +
scale_x_discrete(labels=c('~500 μatm', '~800 μatm')) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold")) +
# labs(title = "F1 Scallops: Slope algae cells/time - feeding rate trials 20210930",
#      y = expression(Slope~"="~absolute~value~"("~Live~algae~cells~mL^{-1}~hour^{-1}~")"),
#      x = expression(italic(p)*CO[2]~Treatment~"("~mu*atm~")")) +
ggtitle("Clearance Rate, F1 Scallops 20210914 (0-90 minutes)")
CR_914_boxplot
df_total.930              <- data.frame() # start dataframe
for (i in 1:nrow(loop_930)) {
dat <- ClearRate_Master.930 %>%
dplyr::filter(uniq_Identifier == loop_930[i,]) %>%
dplyr::arrange(minutes)
C0_total_algae <- dat[1,]$total_algae
dat2 <- dat %>%
#dplyr::mutate(diff = as.numeric(Time._min) - lag(as.numeric(Time._min), default = first(as.numeric(Time._min)))) %>%
dplyr::filter(minutes %in% 90) %>%
dplyr::mutate(Blank = if(pH == 7.5) AlgaeBlank_930_pH7.5 else AlgaeBlank_930_pH8.0 ) %>%
dplyr::mutate(TotalAlgaeLossRatio = C0_total_algae / as.numeric(total_algae) ) %>%
dplyr::filter(!TotalAlgaeLossRatio < 1) %>%
dplyr::mutate(ln_TotalAlgaeLossRatio = ln(TotalAlgaeLossRatio)) %>%
# dplyr::mutate(ClearanceRate =  ( (25/1000) / (diff/60)  * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
#                                   ( ln_AlgaeLossRatio ) / Length.um. ) ) %>%
dplyr::mutate(ClearanceRate_L_hour_mm = ( (25/1000) * # V / t == Volume of the vessel (in Liters as 25 ml / 1000 ml L-1) and t = time in hours as the diff between the interval sin minutes / 60 mins hour-1
(( ln_TotalAlgaeLossRatio /  (as.numeric(minutes)/60) - Blank))) / (Length_um/1000) ) %>%
dplyr::mutate(Time_period = paste( (dat[1,]$minutes),as.numeric(minutes), sep ='-'))
dat2OM <- dat2 %>% dplyr::filter(!minutes == 0)
if (nrow(dat2OM) > 0) {
ClearRate.table           <- data.frame(matrix(nrow = nrow(dat2OM), ncol = 10)) # create dataframe to save cumunalitively during for loop
colnames(ClearRate.table) <- c('Date', 'ID', 'pH', 'Replicate', 'Num','Run', 'Fed_Unfed', 'Time_period', 'TotalAlgaeLossRatio', 'ClearanceRate_L_hour_mm') # names for comuns in the for loop
ClearRate.table$Date                       <- dat2OM$Date
ClearRate.table$ID                         <- loop_930[i,]
ClearRate.table$pH                         <- gsub("_.*", "\\1", ClearRate.table$ID)
ClearRate.table$Fed_Unfed                  <- NA
ClearRate.table$Replicate                  <- gsub("^(?:[^_]+_){4}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Num                        <- gsub("^(?:[^_]+_){6}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Run                        <- gsub("^(?:[^_]+_){2}([^_]+).*", "\\1", ClearRate.table$ID)
ClearRate.table$Time_period                <- dat2OM$Time_period
ClearRate.table$TotalAlgaeLossRatio             <- dat2OM$TotalAlgaeLossRatio
ClearRate.table$ClearanceRate_L_hour_mm <- dat2OM$ClearanceRate_L_hour_mm
df       <- data.frame(ClearRate.table) # name dataframe for this single row
df_total.930 <- rbind(df_total.930,df) #bind to a cumulative list dataframe
#print(df_total.930) # print to monitor progress
}
else {}
}
AlgaeBlank_930_pH7.5
AlgaeBlank_930_pH8.0
# 20210930 DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
AlgaeBlank_930_pH7.5  <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_AlgaeLoss[1]
AlgaeBlank_930_pH8.0  <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 8) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_AlgaeLoss[1]
SestonBlank_930_pH7.5 <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_SestonLoss[1]
SestonBlank_930_pH8.0 <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 8) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_SestonLoss[1]
AlgaeBlank_930_pH7.5
meanBLANKS.Summary
loop_BLANKS
Blanks.Master
Master_data
# Purpose: Bay Scallop Project - Feeding Rates
# analysis of respiration rate data
# Written by: Sam J Gurr (last edit 10/12/2021)
# Review Riisgard 2001 defining the clearance rate of bivalves
# NOTE: clearance rate is defined as the volume of water cleared of suspended particles per unit time, and only equals filtration rate when
# 100% of suspended particles are efficiently retained
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(see)
library(performance)
library(car)
library(reshape2)
library(lubridate)
library(SciViews)
library(reshape2)
library(SciViews)
library(kableExtra)
library(latex2exp)
library(pander)
library(performance)
library(ggpubr)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis") # personal computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Master_data       <- read.csv(file="Data/Feeding_rates/Feeding_MasterData.csv", header=T) # master data file
clear.rate_914    <- Master_data  %>% dplyr::filter(Date %in% 20210914)  %>%
dplyr::mutate(Chamber_tank = paste(pH, Replicate, sep='_'))
clear.rate_930    <- Master_data  %>% dplyr::filter(Date %in% 20210930)  %>%
dplyr::mutate(Chamber_tank = paste(pH, Replicate, sep='_'))
clear.rate_1026    <- Master_data  %>% dplyr::filter(Date %in% 20211026)  %>%
dplyr::mutate(Chamber_tank = paste(pH, Replicate, sep='_'))
length.resp.clear <- read.csv(file="Data/Respiration/Lengths_Condition_resp_clearance.csv", header=T) %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>%
dplyr::rename(Fed_Unfed = Food)
length.resp.clear <- length.resp.clear[!is.na(length.resp.clear$Length_um),]
Blanks.Master <- Master_data %>%
dplyr::filter(Replicate %in% 'blank') %>%
dplyr::mutate(unique_identifier = paste(Date, pH, "Run", Run, sep ='_'))
Blanks.Master$tet.ply     <- (as.numeric(gsub(",", "", Blanks.Master$tet.ply )))*(1000/33)
Blanks.Master$chaet       <- (as.numeric(gsub(",", "", Blanks.Master$chaet )))*(1000/33)
Blanks.Master$total_algae <- (as.numeric(gsub(",", "", Blanks.Master$total_algae )))*(1000/33)
Blanks.Master$seston      <- (as.numeric(gsub(",", "", Blanks.Master$seston )))*(1000/33)
loop_BLANKS       <- as.data.frame(unique(Blanks.Master$unique_identifier)) %>%
dplyr::rename(ID = "unique(Blanks.Master$unique_identifier)") # call unique identifier tfor the for loop calc of blanks
meanBLANKS.Master       <- data.frame()
for (i in 1:nrow(loop_BLANKS)) { # for each unique identifier....
dat <- Blanks.Master %>%
dplyr::filter(unique_identifier == loop_BLANKS[i,]) %>% # subset the data out for that ID
dplyr::arrange(minutes)
# C0_tet         <- (dat %>% dplyr::filter(minutes == 0))$tet.ply
# C0_chaet       <- (dat %>% dplyr::filter(minutes == 0))$chaet
C0_total_algae <- dat[1,]$total_algae # first row - typically time 0 but may be time 15 or 10 for missing values
C0_seston      <- dat[1,]$seston      # first row - typically time 0 but may be time 15 or 10 for missing values
# C0 <- max(dat$Cells_ml[1:2])
for (j in 2:nrow(dat)) { # for each row
Algae_Seston_dat <- dat %>%
dplyr::mutate(TotalLiveAlgaeLossRatio = C0_total_algae / as.numeric(dat$total_algae) ) %>%  # calc the ration of algae lost to the time 0 number
dplyr::mutate(SestonLossRatio = C0_seston / as.numeric(dat$seston) ) %>%  # calc the ration of algae lost to the time 0 number
# dplyr::mutate(Tet_AlgaeLossRatio = C0_tet / as.numeric(dat$tet.ply) ) %>%  # calc the ration of algae lost to the time 0 number
#dplyr::filter(!Tet_AlgaeLossRatio < 1) %>%
dplyr::mutate(ln_TotalLiveAlgaeLossRatio = ln(TotalLiveAlgaeLossRatio)) %>%
dplyr::mutate(ln_SestonLossRatio = ln(SestonLossRatio)) %>%
dplyr::mutate(Time_period = paste((as.numeric(substr(minutes,1,1)) -1), "0-", minutes, sep =''))
Algae_Seston_datOM <- Algae_Seston_dat %>% dplyr::filter(!minutes == 0)
}
if (nrow(Algae_Seston_datOM) > 0) {
df                <- data.frame(Algae_Seston_datOM) # name dataframe for this single row
meanBLANKS.Master <- rbind(meanBLANKS.Master,df) #bind to a cumulative list dataframe
# print(meanBLANKS.914) # print to monitor progress
} else {}
}
meanBLANKS.Summary <- data.frame( meanBLANKS.Master[!is.na(meanBLANKS.Master$ln_TotalLiveAlgaeLossRatio),] %>%
dplyr::filter(!ln_TotalLiveAlgaeLossRatio < 0) %>%
dplyr::group_by(Date, pH, Time_point) %>%
dplyr::summarise(
meanBlank_ln_AlgaeLoss  = mean(ln_TotalLiveAlgaeLossRatio),
sdBlank_ln_AlgaeLoss    = sd(ln_TotalLiveAlgaeLossRatio),
seBlank_ln_AlgaeLoss    = sd(ln_TotalLiveAlgaeLossRatio) / sqrt(length(ln_TotalLiveAlgaeLossRatio)),
meanBlank_ln_SestonLoss = mean(ln_SestonLossRatio),
sdBlank_ln_SestonLoss   = sd(ln_SestonLossRatio),
seBlank_ln_SestonLoss   = sd(ln_SestonLossRatio) / sqrt(length(ln_SestonLossRatio)),
n= n()))
meanBLANKS.Summary
AlgaeBlank_930_pH7.5  <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_AlgaeLoss[1]
AlgaeBlank_930_pH8.0  <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 8) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_AlgaeLoss[1]
SestonBlank_930_pH7.5 <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_SestonLoss[1]
SestonBlank_930_pH8.0 <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 8) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_SestonLoss[1]
AlgaeBlank_930_pH7.5
AlgaeBlank_930_pH8.0
SestonBlank_930_pH7.5
SestonBlank_930_pH8.0
(meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))
(meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))
(meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 8) %>% dplyr::arrange(desc(Time_point)))
(meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210914) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))
(meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210914) %>% dplyr::filter(pH == 7.5) %>% dplyr::sort(Time_point))
(meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210914) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(Time_point))
# 20210914 DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
AlgaeBlank_914_pH7.5 <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210914) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_AlgaeLoss[1]
AlgaeBlank_914_pH8.0  <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210914) %>% dplyr::filter(pH == 8) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_AlgaeLoss[1]
SestonBlank_914_pH7.5 <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210914) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_SestonLoss[1]
SestonBlank_914_pH8.0 <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210914) %>% dplyr::filter(pH == 8) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_SestonLoss[1]
# 20210930 DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
AlgaeBlank_930_pH7.5  <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_AlgaeLoss[1]
AlgaeBlank_930_pH8.0  <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 8) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_AlgaeLoss[1]
SestonBlank_930_pH7.5 <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_SestonLoss[1]
SestonBlank_930_pH8.0 <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 8) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_SestonLoss[1]
SestonBlank_930_pH7.5
SestonBlank_930_pH7.5 <- (meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))$meanBlank_ln_SestonLoss[2]
SestonBlank_930_pH7.5
(meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 7.5) %>% dplyr::arrange(desc(Time_point)))
(meanBLANKS.Summary %>% dplyr::filter(Date %in% 20210930) %>% dplyr::filter(pH == 8) %>% dplyr::arrange(desc(Time_point)))
loop_BLANKS       <- as.data.frame(unique(Blanks.Master$unique_identifier)) %>%
dplyr::rename(ID = "unique(Blanks.Master$unique_identifier)") # call unique identifier tfor the for loop calc of blanks
meanBLANKS.Master       <- data.frame()
for (i in 1:nrow(loop_BLANKS)) { # for each unique identifier....
dat <- Blanks.Master %>%
dplyr::filter(unique_identifier == loop_BLANKS[i,]) %>% # subset the data out for that ID
dplyr::arrange(minutes)
# C0_tet         <- (dat %>% dplyr::filter(minutes == 0))$tet.ply
# C0_chaet       <- (dat %>% dplyr::filter(minutes == 0))$chaet
C0_total_algae <- dat[1,]$total_algae # first row - typically time 0 but may be time 15 or 10 for missing values
C0_seston      <- dat[1,]$seston      # first row - typically time 0 but may be time 15 or 10 for missing values
# C0 <- max(dat$Cells_ml[1:2])
for (j in 2:nrow(dat)) { # for each row
Algae_Seston_dat <- dat %>%
dplyr::mutate(TotalLiveAlgaeLossRatio = C0_total_algae / as.numeric(dat$total_algae) ) %>%  # calc the ration of algae lost to the time 0 number
dplyr::mutate(SestonLossRatio = C0_seston / as.numeric(dat$seston) ) %>%  # calc the ration of algae lost to the time 0 number
# dplyr::mutate(Tet_AlgaeLossRatio = C0_tet / as.numeric(dat$tet.ply) ) %>%  # calc the ration of algae lost to the time 0 number
#dplyr::filter(!Tet_AlgaeLossRatio < 1) %>%
dplyr::mutate(ln_TotalLiveAlgaeLossRatio = ln(TotalLiveAlgaeLossRatio)) %>%
dplyr::mutate(ln_SestonLossRatio = ln(SestonLossRatio)) %>%
dplyr::mutate(Time_period = paste((as.numeric(substr(minutes,1,1)) -1), "0-", minutes, sep =''))
Algae_Seston_datOM <- Algae_Seston_dat %>% dplyr::filter(!minutes == 0)
}
if (nrow(Algae_Seston_datOM) > 0) {
df                <- data.frame(Algae_Seston_datOM) # name dataframe for this single row
meanBLANKS.Master <- rbind(meanBLANKS.Master,df) #bind to a cumulative list dataframe
# print(meanBLANKS.914) # print to monitor progress
} else {}
}
meanBLANKS.Summary <- data.frame( meanBLANKS.Master[!is.na(meanBLANKS.Master$ln_TotalLiveAlgaeLossRatio),] %>%
dplyr::filter(!ln_TotalLiveAlgaeLossRatio < 0) %>%
dplyr::group_by(Date, pH, Time_point) %>%
dplyr::summarise(
meanBlank_ln_AlgaeLoss  = mean(ln_TotalLiveAlgaeLossRatio),
sdBlank_ln_AlgaeLoss    = sd(ln_TotalLiveAlgaeLossRatio),
seBlank_ln_AlgaeLoss    = sd(ln_TotalLiveAlgaeLossRatio) / sqrt(length(ln_TotalLiveAlgaeLossRatio)),
meanBlank_ln_SestonLoss = mean(ln_SestonLossRatio),
sdBlank_ln_SestonLoss   = sd(ln_SestonLossRatio),
seBlank_ln_SestonLoss   = sd(ln_SestonLossRatio) / sqrt(length(ln_SestonLossRatio)),
n= n()))
meanBLANKS.Summary
