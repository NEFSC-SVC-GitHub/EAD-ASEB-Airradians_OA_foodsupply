#  unique(df_total.1026$pH)
# View(df_total.1026)
Ply_CR_1026_Means <- df_total.1026 %>%
dplyr::group_by(pCO2, Fed_Unfed) %>%
dplyr::filter(Ply_mL.hr.bfactor > 0) %>% # ommit negative values
dplyr::summarise(
Ply_meanCR = mean(Ply_mL.hr.bfactor),
Ply_sdCR   = sd(Ply_mL.hr.bfactor),
Ply_seCR   = sd(Ply_mL.hr.bfactor) / sqrt(length(Ply_mL.hr.bfactor)),
n = n())
print(Ply_CR_1026_Means)
Chaet_CR_1026_Means <- df_total.1026 %>%
dplyr::group_by(pCO2, Fed_Unfed) %>%
dplyr::filter(Chaet_mL.hr.bfactor > 0) %>% # ommit negative values
dplyr::summarise(
Chaet_meanCR = mean(Chaet_mL.hr.bfactor),
Chaet_sdCR   = sd(Chaet_mL.hr.bfactor),
Chaet_seCR   = sd(Chaet_mL.hr.bfactor) / sqrt(length(Chaet_mL.hr.bfactor)),
n = n())
print(Chaet_CR_1026_Means)
Seston_CR_1026_Means <- df_total.1026 %>%
dplyr::group_by(pCO2, Fed_Unfed) %>%
dplyr::filter(Seston_mL.hr.bfactor > 0) %>% # ommit negative values
dplyr::summarise(
Seston_meanCR = mean(Seston_mL.hr.bfactor),
Seston_sdCR   = sd(Seston_mL.hr.bfactor),
Seston_seCR   = sd(Seston_mL.hr.bfactor) / sqrt(length(Seston_mL.hr.bfactor)),
n = n())
print(Seston_CR_1026_Means)
View(df_total.1026)
gsub("_.*", "\\1", CR.table$ID)
CR.table$ID
CR.table
loop_914[i,]
loop_914[i,]
meanLength_um_930 <- mean(ClearanceRate_Master.930$Length_um) # 3352.054
# Bayne Biology of oyster page 254: "Cranford et al. (2011) reviewed published allometric relationships between
# clearance rate and body size for 21 bivalve species. Average exponents were below expectation: b1⁄41.780.34 for shell length"
bfactor_Length    <- 1.78
V = 25 # V == Volume of the vessel (in mL as 25 ml)
df_total.930<- data.frame() # start dataframe
for (i in 1:nrow(loop_930)) {
dat <- ClearanceRate_Master.930 %>%
dplyr::filter(uniq_Identifier == loop_930[i,]) %>%
dplyr::mutate(Date_pH = paste(Date, pH, sep = '_')) %>%
dplyr::arrange(time)
t_end      <- nrow(dat)
t_end_min1 <- nrow(dat) - 1
blanks <- meanBLANKS.Summary %>% dplyr::filter(Date_pH %in% dat$Date_pH[1])
# ply
A.ply               <- blanks$meanBlank[blanks$Type == 'Ply']
C0_Ply              <- if ( (max(c(dat[1,]$PLY_cell.ml, dat[2,]$PLY_cell.ml))) < (1.25*  (min(c(dat[1,]$PLY_cell.ml, dat[2,]$PLY_cell.ml)))) )  {
C0_Ply <-  (max(c(dat[1,]$PLY_cell.ml, dat[2,]$PLY_cell.ml)))
} else (C0_Ply <-  (min(c(dat[1,]$PLY_cell.ml, dat[2,]$PLY_cell.ml)))) # C0 for the ply
Cend_Ply            <- (min(c(dat[t_end_min1,]$PLY_cell.ml, dat[t_end,]$PLY_cell.ml)))
t0_Ply              <- dat$time[dat$PLY_cell.ml==C0_Ply]
t_Ply               <- max((dat$time[dat$PLY_cell.ml==Cend_Ply]) - t0_Ply) # call max becasue (although unlikely) there can be a case of the same count - calling multiple values
# no corrected
ClearanceRate.Ply           <- (V * ((ln( C0_Ply / Cend_Ply )/(t_Ply/60)) - A.ply)) # Tetraselmis cells mL-1  hr-1 mm
# shell length corrected
ClearanceRate.Ply.length    <- (V * ((ln( C0_Ply / Cend_Ply )/(t_Ply/60)) - A.ply)) / (dat$Length_um[1] / 1000) # Tetraselmis cells mL-1  hr-1 mm shell length-1
# b factor normalized - Bayne value 1.78
ClearanceRate.Ply.bfactor   <- (V * ((ln( C0_Ply / Cend_Ply )/(t_Ply/60)) - A.ply)) *
((meanLength_um_914 / dat$Length_um[1])^bfactor_Length) # b factor correction
# chaet
A.chaet             <- blanks$meanBlank[blanks$Type == 'Chaet']
C0_Chaet            <- if ( (max(c(dat[1,]$Chaet_cell.ml, dat[2,]$Chaet_cell.ml))) < (1.25*  (min(c(dat[1,]$Chaet_cell.ml, dat[2,]$Chaet_cell.ml)))) )  {
C0_Chaet <-  (max(c(dat[1,]$Chaet_cell.ml, dat[2,]$Chaet_cell.ml)))
} else (C0_Chaet <-  (min(c(dat[1,]$Chaet_cell.ml, dat[2,]$Chaet_cell.ml)))) # C0 for the ply
Cend_Chaet          <- (min(c(dat[t_end_min1,]$Chaet_cell.ml, dat[t_end,]$Chaet_cell.ml)))
t0_Chaet            <- dat$time[dat$Chaet_cell.ml==C0_Chaet]
t_Chaet             <- max((dat$time[dat$Chaet_cell.ml==Cend_Chaet]) - t0_Chaet) # call max becasue (although unlikely) there can be a case of the same count - calling multiple values
# no corrected
ClearanceRate.Chaet          <- (V * ((ln( C0_Chaet / Cend_Chaet )/(t_Chaet/60)) - A.chaet))
# shell length corrected
ClearanceRate.Chaet.length   <- (V * ((ln( C0_Chaet / Cend_Chaet )/(t_Chaet/60)) - A.chaet)) / (dat$Length_um[1] / 1000) # Chaetoceros cells mL-1  hr-1 mm shell length-1
# b factor normalized - Bayne value 1.78
ClearanceRate.Chaet.bfactor  <- (V * ((ln( C0_Chaet / Cend_Chaet )/(t_Chaet/60)) - A.chaet)) *
((meanLength_um_914 / dat$Length_um[1])^bfactor_Length) # b factor correction
# low chl a (seston)
A.Seston             <- blanks$meanBlank[blanks$Type == 'Seston']
C0_Seston            <- if ( (max(c(dat[1,]$Low_chlorophyll_cell.ml, dat[2,]$Low_chlorophyll_cell.ml))) < (1.25*  (min(c(dat[1,]$Low_chlorophyll_cell.ml, dat[2,]$Low_chlorophyll_cell.ml)))) )  {
C0_Seston <-  (max(c(dat[1,]$Low_chlorophyll_cell.ml, dat[2,]$Low_chlorophyll_cell.ml)))
} else (C0_Seston <-  (min(c(dat[1,]$Low_chlorophyll_cell.ml, dat[2,]$Low_chlorophyll_cell.ml)))) # C0 for the ply
Cend_Seston          <- (min(c(dat[t_end_min1,]$Low_chlorophyll_cell.ml, dat[t_end,]$Low_chlorophyll_cell.ml)))
t0_Seston            <- dat$time[dat$Low_chlorophyll_cell.ml==C0_Seston]
t_Seston             <- max((dat$time[dat$Low_chlorophyll_cell.ml==Cend_Seston]) - t0_Seston) # call max becasue (although unlikely) there can be a case of the same count - calling multiple values
# no corrected
ClearanceRate.Seston         <- (V * ((ln( C0_Seston / Cend_Seston )/(t_Seston/60)) - A.Seston))
# shell length corrected
ClearanceRate.Seston.length  <- (V * ((ln( C0_Seston / Cend_Seston )/(t_Seston/60)) - A.Seston)) / (dat$Length_um[1] / 1000) # seston cells mL-1  hr-1 mm shell length-1
# b factor normalized - Bayne value 1.78
ClearanceRate.Seston.bfactor <- (V * ((ln( C0_Seston / Cend_Seston )/(t_Seston/60)) - A.Seston)) *
((meanLength_um_914 / dat$Length_um[1])^bfactor_Length) # b factor correction
dat2 <- dat[1,] %>%
dplyr::select(c('Date','pH', 'Replicate', 'Fed_Unfed','Run', 'Plate', 'Number', 'Length_um')) %>%
mutate(Ply_mL.hr            = ClearanceRate.Ply) %>%
mutate(Ply_mL.hr.mmlength   = ClearanceRate.Ply.length) %>%
mutate(Ply_mL.hr.bfactor    = ClearanceRate.Ply.bfactor) %>%
mutate(Chaet_mL.hr          = ClearanceRate.Chaet) %>%
mutate(Chaet_mL.hr.mmlength = ClearanceRate.Chaet.length) %>%
mutate(Chaet_mL.hr.bfactor  = ClearanceRate.Chaet.bfactor) %>%
mutate(Seston_mL.hr          = ClearanceRate.Seston) %>%
mutate(Seston_mL.hr.mmlength = ClearanceRate.Seston.length) %>%
mutate(Seston_mL.hr.bfactor  = ClearanceRate.Seston.bfactor)
if (nrow(dat2) > 0) {
CR.table           <- data.frame(matrix(nrow = nrow(dat2), ncol = 18)) # create dataframe to save cumunalitively during for loop
colnames(CR.table) <- c('Date', 'ID', 'pH', 'Replicate', 'Fed_Unfed','Run', 'Plate', 'Number', 'Length_um',
'Chaet_mL.hr','Chaet_mL.hr.mmlength', 'Chaet_mL.hr.bfactor',
'Ply_mL.hr', 'Ply_mL.hr.mmlength', 'Ply_mL.hr.bfactor',
'Seston_mL.hr','Seston_mL.hr.mmlength','Seston_mL.hr.bfactor')
CR.table$Date                       <- dat2$Date
CR.table$ID                         <- loop_930[i,]
CR.table$pH                         <- gsub("_.*", "\\1", CR.table$ID)
CR.table$Replicate                  <- gsub("^(?:[^_]+_){4}([^_]+).*", "\\1", CR.table$ID)
CR.table$Fed_Unfed                  <- dat2$Fed_Unfed
CR.table$Run                        <- gsub("^(?:[^_]+_){2}([^_]+).*", "\\1", CR.table$ID)
CR.table$Plate                      <- dat2$Plate
CR.table$Number                     <- gsub("^(?:[^_]+_){6}([^_]+).*", "\\1", CR.table$ID)
CR.table$Length_um                  <- dat2$Length_um
CR.table$Ply_mL.hr                  <- dat2$Ply_mL.hr
CR.table$Ply_mL.hr.mmlength         <- dat2$Ply_mL.hr.mmlength
CR.table$Ply_mL.hr.bfactor          <- dat2$Ply_mL.hr.bfactor
CR.table$Chaet_mL.hr                <- dat2$Chaet_mL.hr
CR.table$Chaet_mL.hr.mmlength       <- dat2$Chaet_mL.hr.mmlength
CR.table$Chaet_mL.hr.bfactor        <- dat2$Chaet_mL.hr.bfactor
CR.table$Seston_mL.hr               <- dat2$Seston_mL.hr
CR.table$Seston_mL.hr.mmlength      <- dat2$Seston_mL.hr.mmlength
CR.table$Seston_mL.hr.bfactor       <- dat2$Seston_mL.hr.bfactor
df       <- data.frame(CR.table) # name dataframe for this single row
df_total.930 <- rbind(df_total.930,df) #bind to a cumulative list dataframe
#print(df_total.930) # print to monitor progress
} else {}
}
df_total.930 <- df_total.930  %>%
dplyr::mutate(pCO2 = case_when(pH == 8.0 ~ "500 μatm", pH == 7.5 ~ "800 μatm")) %>%
dplyr::mutate(random_fact = as.factor(paste(Replicate, pH, Fed_Unfed, sep = '_')))
Ply_CR_930_Means <- df_total.930 %>%
dplyr::group_by(pCO2, Fed_Unfed) %>%
dplyr::filter(Ply_mL.hr.bfactor > 0) %>% # ommit negative values
dplyr::summarise(
Ply_meanCR = mean(Ply_mL.hr.bfactor),
Ply_sdCR   = sd(Ply_mL.hr.bfactor),
Ply_seCR   = sd(Ply_mL.hr.bfactor) / sqrt(length(Ply_mL.hr.bfactor)),
n = n())
print(Ply_CR_930_Means)
Chaet_CR_930_Means <- df_total.930 %>%
dplyr::group_by(pCO2, Fed_Unfed) %>%
dplyr::filter(Chaet_mL.hr.bfactor > 0) %>% # ommit negative values
dplyr::summarise(
Chaet_meanCR = mean(Chaet_mL.hr.bfactor),
Chaet_sdCR   = sd(Chaet_mL.hr.bfactor),
Chaet_seCR   = sd(Chaet_mL.hr.bfactor) / sqrt(length(Chaet_mL.hr.bfactor)),
n = n())
Seston_CR_930_Means <- df_total.930 %>%
dplyr::group_by(pCO2, Fed_Unfed) %>%
dplyr::filter(Seston_mL.hr.bfactor > 0) %>% # ommit negative values
dplyr::summarise(
Seston_meanCR = mean(Seston_mL.hr.bfactor),
Seston_sdCR   = sd(Seston_mL.hr.bfactor),
Seston_seCR   = sd(Seston_mL.hr.bfactor) / sqrt(length(Seston_mL.hr.bfactor)),
n = n())
meanLength_um_1026 <- mean(ClearanceRate_Master.1026$Length_um) # 7130.816
# Bayne Biology of oyster page 254: "Cranford et al. (2011) reviewed published allometric relationships between
# clearance rate and body size for 21 bivalve species. Average exponents were below expectation: b1⁄41.780.34 for shell length"
bfactor_Length     <- 1.78
V = 25 # V == Volume of the vessel (in mL as 25 ml)
df_total.1026<- data.frame() # start dataframe
for (i in 1:nrow(loop_1026)) {
dat <- ClearanceRate_Master.1026 %>%
dplyr::filter(uniq_Identifier == loop_1026[i,]) %>%
dplyr::mutate(Date_pH = paste(Date, pH, sep = '_')) %>%
dplyr::arrange(time)
t_end      <- nrow(dat)
t_end_min1 <- nrow(dat) - 2
blanks <- meanBLANKS.Summary %>% dplyr::filter(Date_pH %in% dat$Date_pH[1])
# ply
A.ply               <- blanks$meanBlank[blanks$Type == 'Ply']
C0_Ply              <- max(dat$PLY_cell.ml[c(1:2)])
Cend_Ply            <- min(dat$PLY_cell.ml[c(t_end_min1:t_end)])
t0_Ply              <- dat$time[dat$PLY_cell.ml==C0_Ply]
t_Ply               <- max(  (min(dat$time[dat$PLY_cell.ml==Cend_Ply])) - t0_Ply) # call max becasue (although unlikely) there can be a case of the same count - calling multiple values
# no correction
if (Cend_Ply == 0) {
ClearanceRate.Ply <- (V * ((ln( C0_Ply / 0.0001 )/(t_Ply/60)) - A.ply)) # Chaetoceros cells mL-1  hr-1 mm shell length-1
} else ( ClearanceRate.Ply <- (V * ((ln( C0_Ply / Cend_Ply )/(t_Ply/60)) - A.ply)))
# shell length corrected
if (Cend_Ply == 0) {
ClearanceRate.Ply.length <- (V * ((ln( C0_Ply / 0.0001 )/(t_Ply/60)) - A.ply)) / (dat$Length_um[1] / 1000) # Chaetoceros cells mL-1  hr-1 mm shell length-1
} else ( ClearanceRate.Ply.length <- (V * ((ln( C0_Ply / Cend_Ply )/(t_Ply/60)) - A.ply)) / (dat$Length_um[1] / 1000))
# b factor normalized - Bayne value 1.78
if (Cend_Ply == 0) {
ClearanceRate.Ply.bfactor <- (V * ((ln( C0_Ply / 0.0001 )/(t_Ply/60)) - A.ply)) * ((meanLength_um_1026 / dat$Length_um[1])^bfactor_Length) # b factor correction  # Chaetoceros cells mL-1  hr-1 mm shell length-1
} else ( ClearanceRate.Ply.bfactor <- (V * ((ln( C0_Ply / Cend_Ply )/(t_Ply/60)) - A.ply)) * ((meanLength_um_1026 / dat$Length_um[1])^bfactor_Length) )# b factor correction  # Chaetoceros cells mL-1  hr-1 mm shell length-1
# chaet
A.chaet             <- blanks$meanBlank[blanks$Type == 'Chaet']
C0_Chaet            <- max(dat$Chaet_cell.ml[c(1:2)])
Cend_Chaet          <- min(dat$Chaet_cell.ml[c(t_end_min1:t_end)])
t0_Chaet            <- dat$time[dat$Chaet_cell.ml==C0_Chaet]
t_Chaet             <- max((dat$time[dat$Chaet_cell.ml==Cend_Chaet]) - t0_Chaet) # call max becasue (although unlikely) there can be a case of the same count - calling multiple values
# no correction
if (Cend_Chaet == 0) {
ClearanceRate.Chaet <- (V * ((ln( C0_Chaet / 0.0001 )/(t_Chaet/60)) - A.chaet)) # Chaetoceros cells mL-1  hr-1 mm shell length-1
} else ( ClearanceRate.Chaet <- (V * ((ln( C0_Chaet / Cend_Chaet )/(t_Chaet/60)) - A.chaet)))
# shell length corrected
if (Cend_Chaet == 0) {
ClearanceRate.Chaet.length <- (V * ((ln( C0_Chaet / 0.0001 )/(t_Chaet/60)) - A.chaet)) / (dat$Length_um[1] / 1000) # Chaetoceros cells mL-1  hr-1 mm shell length-1
} else ( ClearanceRate.Chaet.length <- (V * ((ln( C0_Chaet / Cend_Chaet )/(t_Chaet/60)) - A.chaet)) / (dat$Length_um[1] / 1000))
# b factor normalized - Bayne value 1.78
if (Cend_Chaet == 0) {
ClearanceRate.Chaet.bfactor <- (V * ((ln( C0_Chaet / 0.0001 )/(t_Chaet/60)) - A.chaet)) * ((meanLength_um_1026 / dat$Length_um[1])^bfactor_Length) # b factor correction  # Chaetoceros cells mL-1  hr-1 mm shell length-1
} else ( ClearanceRate.Chaet.bfactor <- (V * ((ln( C0_Chaet / Cend_Chaet )/(t_Chaet/60)) - A.chaet)) * ((meanLength_um_1026 / dat$Length_um[1])^bfactor_Length) )# b factor correction  # Chaetoceros cells mL-1  hr-1 mm shell length-1
# low chl a (seston)
A.Seston             <- blanks$meanBlank[blanks$Type == 'Seston']
C0_Seston            <- max(dat$Low_chlorophyll_cell.ml[c(1:2)])
Cend_Seston          <- min(dat$Low_chlorophyll_cell.ml[c(t_end_min1:t_end)])
t0_Seston            <- dat$time[dat$Low_chlorophyll_cell.ml==C0_Seston]
t_Seston             <- max((dat$time[dat$Low_chlorophyll_cell.ml==Cend_Seston]) - t0_Seston) # call max becasue (although unlikely) there can be a case of the same count - calling multiple values
# no correction
if (Cend_Seston == 0) {
ClearanceRate.Seston <- (V * ((ln( C0_Seston / 0.0001 )/(t_Seston/60)) - A.Seston)) # Chaetoceros cells mL-1  hr-1 mm shell length-1
} else ( ClearanceRate.Seston <- (V * ((ln( C0_Seston / Cend_Seston )/(t_Seston/60)) - A.Seston)))
# shell length corrected
if (Cend_Seston == 0) {
ClearanceRate.Seston.length <- (V * ((ln( C0_Seston / 0.0001 )/(t_Seston/60)) - A.Seston)) / (dat$Length_um[1] / 1000) # Chaetoceros cells mL-1  hr-1 mm shell length-1
} else ( ClearanceRate.Seston.length <- (V * ((ln( C0_Seston / Cend_Seston )/(t_Seston/60)) - A.Seston)) / (dat$Length_um[1] / 1000))
# b factor normalized - Bayne value 1.78
if (Cend_Seston == 0) {
ClearanceRate.Seston.bfactor <- (V * ((ln( C0_Seston / 0.0001 )/(t_Seston/60)) - A.Seston)) * ((meanLength_um_1026 / dat$Length_um[1])^bfactor_Length) # b factor correction  # Chaetoceros cells mL-1  hr-1 mm shell length-1
} else ( ClearanceRate.Seston.bfactor <- (V * ((ln( C0_Seston / Cend_Seston )/(t_Seston/60)) - A.Seston)) * ((meanLength_um_1026 / dat$Length_um[1])^bfactor_Length) )# b factor correction  # Chaetoceros cells mL-1  hr-1 mm shell length-1
dat2 <- dat[1,] %>%
dplyr::select(c('Date','pH', 'Replicate', 'Fed_Unfed','Run', 'Plate', 'Number', 'Length_um')) %>%
mutate(Ply_mL.hr            = ClearanceRate.Ply) %>%
mutate(Ply_mL.hr.mmlength   = ClearanceRate.Ply.length) %>%
mutate(Ply_mL.hr.bfactor    = ClearanceRate.Ply.bfactor) %>%
mutate(Chaet_mL.hr          = ClearanceRate.Chaet) %>%
mutate(Chaet_mL.hr.mmlength = ClearanceRate.Chaet.length) %>%
mutate(Chaet_mL.hr.bfactor  = ClearanceRate.Chaet.bfactor) %>%
mutate(Seston_mL.hr          = ClearanceRate.Seston) %>%
mutate(Seston_mL.hr.mmlength = ClearanceRate.Seston.length) %>%
mutate(Seston_mL.hr.bfactor  = ClearanceRate.Seston.bfactor)
if (nrow(dat2) > 0) {
CR.table           <- data.frame(matrix(nrow = nrow(dat2), ncol = 18)) # create dataframe to save cumunalitively during for loop
colnames(CR.table) <- c('Date', 'ID', 'pH', 'Replicate', 'Fed_Unfed','Run', 'Plate', 'Number', 'Length_um',
'Chaet_mL.hr','Chaet_mL.hr.mmlength', 'Chaet_mL.hr.bfactor',
'Ply_mL.hr', 'Ply_mL.hr.mmlength', 'Ply_mL.hr.bfactor',
'Seston_mL.hr','Seston_mL.hr.mmlength','Seston_mL.hr.bfactor')
CR.table$Date                       <- dat2$Date
CR.table$ID                         <- loop_1026[i,]
CR.table$pH                         <- gsub("_.*", "\\1", CR.table$ID)
CR.table$Replicate                  <- gsub("^(?:[^_]+_){4}([^_]+).*", "\\1", CR.table$ID)
CR.table$Fed_Unfed                  <- dat2$Fed_Unfed
CR.table$Run                        <- gsub("^(?:[^_]+_){2}([^_]+).*", "\\1", CR.table$ID)
CR.table$Plate                      <- dat2$Plate
CR.table$Number                     <- gsub("^(?:[^_]+_){6}([^_]+).*", "\\1", CR.table$ID)
CR.table$Length_um                  <- dat2$Length_um
CR.table$Ply_mL.hr                  <- dat2$Ply_mL.hr
CR.table$Ply_mL.hr.mmlength         <- dat2$Ply_mL.hr.mmlength
CR.table$Ply_mL.hr.bfactor          <- dat2$Ply_mL.hr.bfactor
CR.table$Chaet_mL.hr                <- dat2$Chaet_mL.hr
CR.table$Chaet_mL.hr.mmlength       <- dat2$Chaet_mL.hr.mmlength
CR.table$Chaet_mL.hr.bfactor        <- dat2$Chaet_mL.hr.bfactor
CR.table$Seston_mL.hr               <- dat2$Seston_mL.hr
CR.table$Seston_mL.hr.mmlength      <- dat2$Seston_mL.hr.mmlength
CR.table$Seston_mL.hr.bfactor       <- dat2$Seston_mL.hr.bfactor
df       <- data.frame(CR.table) # name dataframe for this single row
df_total.1026 <- rbind(df_total.1026,df) #bind to a cumulative list dataframe
#print(df_total.1026) # print to monitor progress
} else {}
}
df_total.1026 <- df_total.1026  %>%
dplyr::mutate(pCO2 = case_when(pH == 8.0 ~ "500 μatm", pH == 7.5 ~ "800 μatm")) %>%
dplyr::mutate(random_fact = as.factor(paste(Replicate, pH, Fed_Unfed, sep = '_')))
#  unique(df_total.1026$pH)
# View(df_total.1026)
Ply_CR_1026_Means <- df_total.1026 %>%
dplyr::group_by(pCO2, Fed_Unfed) %>%
dplyr::filter(Ply_mL.hr.bfactor > 0) %>% # ommit negative values
dplyr::summarise(
Ply_meanCR = mean(Ply_mL.hr.bfactor),
Ply_sdCR   = sd(Ply_mL.hr.bfactor),
Ply_seCR   = sd(Ply_mL.hr.bfactor) / sqrt(length(Ply_mL.hr.bfactor)),
n = n())
print(Ply_CR_1026_Means)
Chaet_CR_1026_Means <- df_total.1026 %>%
dplyr::group_by(pCO2, Fed_Unfed) %>%
dplyr::filter(Chaet_mL.hr.bfactor > 0) %>% # ommit negative values
dplyr::summarise(
Chaet_meanCR = mean(Chaet_mL.hr.bfactor),
Chaet_sdCR   = sd(Chaet_mL.hr.bfactor),
Chaet_seCR   = sd(Chaet_mL.hr.bfactor) / sqrt(length(Chaet_mL.hr.bfactor)),
n = n())
Seston_CR_1026_Means <- df_total.1026 %>%
dplyr::group_by(pCO2, Fed_Unfed) %>%
dplyr::filter(Seston_mL.hr.bfactor > 0) %>% # ommit negative values
dplyr::summarise(
Seston_meanCR = mean(Seston_mL.hr.bfactor),
Seston_sdCR   = sd(Seston_mL.hr.bfactor),
Seston_seCR   = sd(Seston_mL.hr.bfactor) / sqrt(length(Seston_mL.hr.bfactor)),
n = n())
ClearanceRate_Calc <- rbind(df_total.914, df_total.930, df_total.1026)
write.csv(ClearanceRate_Calc, "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/ClearanceRates/ClearanceRate_Calc.csv")
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # personal computer
Master_calculated <- read.csv(file="Output/ClearanceRates/ClearanceRate_Calc.csv", header=T, fileEncoding = "latin1")
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # personal computer
Master_calculated <- read.csv(file="Output/ClearanceRates/ClearanceRate_Calc.csv", header=T, fileEncoding = "latin1")
Master_calculated
nrow(Master_calculated) # 118
Master_calculated
CR.Master_bfactor_plotting <- Master_calculated %>%
dplyr::mutate(log10_CR_Ply       = log10(as.numeric(Master_calculated$Chaet_mL.hr)) ) %>%  # assign resp value
dplyr::mutate(log10_CR_Chaet     = log10(as.numeric(Master_calculated$Ply_mL.hr)) ) %>%  # assign resp value
dplyr::mutate(log10_CR_Seston    = log10(as.numeric(Master_calculated$Seston_mL.hr)) ) %>%  # assign resp value
dplyr::mutate(log10_Length       = log10(as.numeric(Master_calculated$Length_um)) ) %>% # assign length value
dplyr::mutate(Food_OA            = paste(Master_calculated$pCO2, Master_calculated$Fed_Unfed, sep = "_")) # two-way factor to facet plots by
Chaet_b.factorLENGTH_PLOT <- CR.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_CR_Ply)) +
geom_point() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("CR Scaling exponent: log10_CR_Chaet = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x.npc = "left")
Chaet_b.factorLENGTH_PLOT
Chaet_b.factorLENGTH_PLOT
Chaet_b.factorLENGTH_PLOT        <- CR.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_CR_Chaet)) +
geom_point() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("CR Scaling exponent: log10_CR_Chaet = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x.npc = "left")
Chaet_b.factorLENGTH_PLOT_facetted <- CR.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_CR_Chaet, color = pCO2)) +
geom_point() +
scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("Metabolic scaling: log10_MO2 = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label..,
..rr.label.., sep = "~~~")),
label.x.npc = "left") +
facet_wrap(~Food_OA)
Chaet_b.factorLENGTH_PLOT_facetted <- CR.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_CR_Chaet, color = pCO2)) +
geom_point() +
scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("CR Scaling exponent: log10_CR_Chaet = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label..,
..rr.label.., sep = "~~~")),
label.x.npc = "left") +
facet_wrap(~Food_OA)
print(ggarrange(Chaet_b.factorLENGTH_PLOT,
Chaet_b.factorLENGTH_PLOT_facetted))
Chaet_b.factorLENGTH_PLOT_facetted
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # personal computer
Master_calculated <- read.csv(file="Output/ClearanceRates/ClearanceRate_Calc.csv", header=T)
Master_calculated
CR.Master_bfactor_plotting <- Master_calculated %>%
dplyr::mutate(log10_CR_Ply       = log10(as.numeric(Master_calculated$Chaet_mL.hr)) ) %>%  # assign resp value
dplyr::mutate(log10_CR_Chaet     = log10(as.numeric(Master_calculated$Ply_mL.hr)) ) %>%  # assign resp value
dplyr::mutate(log10_CR_Seston    = log10(as.numeric(Master_calculated$Seston_mL.hr)) ) %>%  # assign resp value
dplyr::mutate(log10_Length       = log10(as.numeric(Master_calculated$Length_um)) ) %>% # assign length value
dplyr::mutate(Food_OA            = paste(Master_calculated$pCO2, Master_calculated$Fed_Unfed, sep = "_")) # two-way factor to facet plots by
Chaet_b.factorLENGTH_PLOT        <- CR.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_CR_Chaet)) +
geom_point() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("CR Scaling exponent: log10_CR_Chaet = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x.npc = "left")
Chaet_b.factorLENGTH_PLOT_facetted <- CR.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_CR_Chaet, color = pCO2)) +
geom_point() +
scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("CR Scaling exponent: log10_CR_Chaet = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label..,
..rr.label.., sep = "~~~")),
label.x.npc = "left") +
facet_wrap(~Food_OA)
ggarrange(Chaet_b.factorLENGTH_PLOT,
Chaet_b.factorLENGTH_PLOT_facetted)
Ply_b.factorLENGTH_PLOT        <- CR.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_CR_Ply)) +
geom_point() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("CR Scaling exponent: log10_CR_Ply = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x.npc = "left")
Ply_b.factorLENGTH_PLOT_facetted <- CR.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_CR_Ply, color = pCO2)) +
geom_point() +
scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("CR Scaling exponent: log10_CR_Ply = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label..,
..rr.label.., sep = "~~~")),
label.x.npc = "left") +
facet_wrap(~Food_OA)
Ply_b.factorLENGTH_PLOT_facetted
Ply_b.factorLENGTH_PLOT
Seston_b.factorLENGTH_PLOT        <- CR.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_CR_Seston)) +
geom_point() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("CR Scaling exponent: log10_CR_Seston = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x.npc = "left")
Seston_b.factorLENGTH_PLOT_facetted <- CR.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_CR_Seston, color = pCO2)) +
geom_point() +
scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("CR Scaling exponent: log10_CR_Seston = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label..,
..rr.label.., sep = "~~~")),
label.x.npc = "left") +
facet_wrap(~Food_OA)
Seston_b.factorLENGTH_PLOT_facetted
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/scaling_exponent/CRScaling_bFactor_Length_Seston.pdf"), width = 8, height = 12)
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/ClearanceRates/scaling_exponent/CRScaling_bFactor_Length_Seston.pdf"), width = 8, height = 12)
print(ggarrange(Seston_b.factorLENGTH_PLOT, Seston_b.factorLENGTH_PLOT_facetted, nrow = 2, ncol = 1)) # print the model diagnostics
dev.off()
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/ClearanceRates/scaling_exponent/CRScaling_bFactor_Length_Ply.pdf"), width = 8, height = 12)
print(ggarrange(Ply_b.factorLENGTH_PLOT, Ply_b.factorLENGTH_PLOT_facetted, nrow = 2, ncol = 1)) # print the model diagnostics
dev.off()
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/ClearanceRates/scaling_exponent/CRScaling_bFactor_Length_Chaet.pdf"), width = 8, height = 12)
print(ggarrange(Chaet_b.factorLENGTH_PLOT, Chaet_b.factorLENGTH_PLOT_facetted, nrow = 2, ncol = 1)) # print the model diagnostics
dev.off()
