dplyr::mutate(volume = case_when(
filetype == "LoLigo_data" & Date %in% c('9/14/2021','9/30/2021') ~ 2.2,# fed F1 foodxOA
filetype == "SDR_data" & Date %in% c('9/30/2021','10/26/2021')~ 1.7, # small unfed F1s foodxOA; 24-well plate - 1700ul
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH1' ~ 23.1,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH2' ~ 23.05,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH4' ~ 22.55,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH5' ~ 23.18,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH6' ~ 23.24,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH7' ~ 22.63,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH8' ~ 22.95,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH3' ~ 23.31
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH1' ~ 68.55323, # F1 data
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH2' ~ 68.85583,
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH4' ~ 68.95481,
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH5' ~ 68.57288,
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH6' ~ 68.01878,
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH7' ~ 68.54551,
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH8' ~ 68.53297,
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH3' ~ 68.87473)) %>% #larger custom vessels measured individually...
# factor in the biovolume (volume displaced from the animal) to get the actual calculated volume of the chambers
dplyr::mutate(Length_mm = Length_um/1000) %>% # Length in millimeters
dplyr::mutate(Biovol_length3 = (0.000198*(Length_mm^3)))  %>% # biovoume calc using length(mm)^3; 0.000198 from a regression run with all F1 data
dplyr::mutate(calculated_volume = (volume - Biovol_length3)) %>%  # actual volume of the vessel accounting for the volume displaced (length^3 equivelent to the measured biovolume)
# REspiration units mg minute -> mg L hr
dplyr::mutate(resp_mg_L_hr =(resp_blankStand *  # resp corrected for blank (remember within Date, Run and treatment!) - currently as raw units of mg O2 per minute (output from LoLinR script)
(calculated_volume/1000) * # mult vessel corrected in Liters - now units in  mg per L per min
60))  %>% # mult by 60 to convert to hours - now units in mg L per hour
dplyr::mutate(resp_umol_L_hr = ( (resp_mg_L_hr * 1000) / 32) ) #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(see)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(stringr)
library(latex2exp)
library(Rmisc)
library(ggpubr)
library(hrbrthemes)
library(nlme)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # personal computer
# setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # Work computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resp.data       <- read.csv(file="Output/Respiration/Cumulative_resp_alpha0.4_15sectrunc1hour.csv", header=T) %>%
dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt') # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
exp_metadata    <- read.csv(file="Data/ExperimentMetadata.csv", header=T) # treatment assignments to 'Chamber_Tank'
lengths         <- read.csv(file="Data/Respiration/Lengths_Condition_resp_clearance.csv", header=T)
resp.ref        <- read.csv(file="Data/Respiration/Reference_master.csv", header=T) %>% dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt')
DWs_Len_1026    <- read.csv(file="Data/Survival_Size/20211026_lengths_dryweights.csv", header=T)
DWs_Len_914.930 <- read.csv(file="Data/Survival_Size/2021914_930_dryweights.csv", header=T)
# merge the exp_metadata with the resp.data
resp.ref_length_merged  <- merge(resp.ref, lengths) # all TRUE allows us to keep the blanks
resp.data_merged        <- merge(resp.data, resp.ref_length_merged) %>% # out master file moving forward....
dplyr::mutate(filetype =
str_sub(Filename, -3,-1)) %>%  # column as csv and txt
dplyr::mutate(filetype =
factor(ifelse(filetype == "csv", "SDR_data", "LoLigo_data"))) # asign SDR for all csv files and Loligo for all txt files
kable(head(resp.data_merged)) # print in a R markdown format to view
# VISAUL INSPECCTION:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#  914 runs...
resp.data_merged[48 ,c(1:6)]  #  CH5	Run_2_raw.txt	-0.005252180	-0.004583581	-0.004583581
resp.data_merged[44 ,c(1:6)]  #  CH3	Run_2_raw.txt	-0.010489214	-0.008507836	-0.008507836
resp.data_merged[36 ,c(1:6)]  #  CH1	Run_2_raw.txt	0.000995514	0.002014487	0.002014487
#resp.data_merged[23 ,c(1:6)]  #  CH5	Run_1_raw.txt	-0.00704407	-0.005910146	-0.005910146
resp.data_merged[37 ,c(1:6)]  #  CH1	Run_3_raw.txt	-0.01067604	-0.01067604	-0.01067604
resp.data_merged[41 ,c(1:6)]  #  CH2	Run_3_raw.txt	-0.002221288	-0.00212516	-0.00212516
resp.data_merged[45 ,c(1:6)]  #  CH3	Run_3_raw.txt	-0.001386829	-0.00246828	-0.00246828
resp.data_merged[49 ,c(1:6)]  #  CH5	Run_3_raw.txt	-0.01019991	-0.01748781	-0.01748781
# 930 runs...
resp.data_merged[71 ,c(1:6)]  # A5	RR_9.30.21_AM_Plate_1_Run_1.csv	-0.002463294	-0.003383279	-0.003383279
resp.data_merged[95 ,c(1:6)]  #  C1 RR_9.30.21_AM_Plate_2_Run_1.csv # -0.02890813	-0.0608251	-0.0608251 - Lz and Leq  better
resp.data_merged[111,c(1:6)]  #  C5 RR_9.30.21_PM_Plate_2_Run_2.csv	0.029052351	-0.076034441	-0.076034441
resp.data_merged[96 ,c(1:6)]  #  C1 RR_9.30.21_PM_Plate_1_Run_2.csv	0.011656487	0.011656487	0.011656487
# CHANGES (based on rerun or whether Lz/Leq better explains) :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# 914 changes..
resp.data_merged[48 ,4]  <- as.numeric(-0.0154) # RERUN
resp.data_merged[44 ,4]  <- as.numeric(-0.0205) # RERUN
resp.data_merged[36 ,4]  <- as.numeric(-0.0164) # RERUN
#resp.data_merged[23 ,4]  <- as.numeric(-0.0275) # RERUN
resp.data_merged[37 ,4]  <- as.numeric(-0.00123) # RERUN
resp.data_merged[41 ,4]  <- as.numeric(-0.0036)  # RERUN
resp.data_merged[45 ,4]  <- as.numeric(-0.0034)  # RERUN
resp.data_merged[49 ,4]  <- as.numeric(-0.0207)  # RERUN
# 930 changes..
resp.data_merged[71 ,4]  <- as.numeric(-0.0128) # RERUN
resp.data_merged[95 ,4]  <- resp.data_merged[95,5] # 20210930_Plate_2_Run_2_C5_regression - Lz and Leq regression than Lpc
resp.data_merged[111,4]  <- resp.data_merged[111,5] # 20210930_Plate_2_Run_1_C1_regression - Lz and Leq  regression than Lpc
resp.data_merged[96 ,4]  <- as.numeric(-0.0296) # RERUN
#resp.data_merged[23 ,4]  <- as.numeric(-0.0275) # RERUN
# look at the data for sanity check...
resp.data_merged[44 ,c(1:6)] # -0.0205
resp.data_merged[36 ,c(1:6)] # -0.0164
resp.data_merged[23 ,c(1:6)] # -0.0275
#resp.data_merged[23 ,c(1:6)] # -0.0275
resp.data_merged[37 ,c(1:6)] # -0.00123
resp.data_merged[41 ,c(1:6)] # -0.0036
resp.data_merged[45 ,c(1:6)] # -0.0034
resp.data_merged[49 ,c(1:6)] # -0.0207
resp.data_merged[95 ,c(1:6)] # -0.0608251
resp.data_merged[111,c(1:6)] # -0.07603444
resp.data_merged[96 ,c(1:6)] # -0.0296
# View(resp.data_merged)
blanks_total <- data.frame() # start dataframe
blanks.table <- data.frame(matrix(nrow = 1,ncol = 5)) # make a table template
colnames(blanks.table)<-c('Date', 'Channel', 'mean_Lpc', 'mean_Leq' , 'mean_Lz') # names for comuns in the for loop
# filter all blanks and edit where needed
blanks_all_raw <- data.frame(merge(resp.ref, resp.data, by = c('Date', 'Channel', 'Filename')) %>%
dplyr::filter(!Date ==  '9/14/2021'   | !Filename == 'Run_1_raw.txt') %>%  # run 1 was restarted due to poor data
dplyr::mutate(filetype = str_sub(Filename, -3,-1)) %>%
dplyr::mutate(filetype = factor(ifelse(filetype == "csv", "SDR_data", "LoLigo_data"))) %>%
dplyr::filter(Chamber_tank  == 'blank') %>% # filter all ocurances of blank
dplyr::filter(!Date == '9/30/2021' | !Lpc < -0.035) %>% #omits C6 RR_9.30.21_AM_Plate_1_Run_1.csv	8.0	blank - View the Lolin plot, looks noisy and a fast outlier from the others
dplyr::filter(!Date == '10/26/2021'  | !Channel == "CH8" | !Run == "2" ) %>%  # omit a bad blank that contained a bad seal, noted on the respiration sampling day during the trial
dplyr::filter(!Date == '10/26/2021'  | !Channel == "CH8" | !Run == "3" ) %>%  # omit a bad blank that contained a bad seal, noted on the respiration sampling day during the trial
dplyr::filter(!Date ==  '9/30/2021'   | !pH == "7.5" | !Channel == "B2" | !Run == "1" | !Plate == "1" ) %>%
dplyr::select(c(Date, pH, Run, Plate, Lpc, Leq ,Lz, Channel, Food, Filename, filetype, Chamber_tank)) %>% # select desired columns
dplyr::arrange(Date, Run, pH)) # arrange the dataset to have consistant read out for process below...
kable(blanks_all_raw)
# blank means by date*pH*run
blanks_means <- blanks_all_raw %>%
dplyr::group_by(Date, pH, Run, filetype) %>%
dplyr::filter(Chamber_tank == "blank") %>%
dplyr::filter(Lpc <0) %>% # ommit blank calls that d/n represent oxygen consumption
dplyr::summarise(BLANK.mean_Lpc = mean(abs(Lpc)),
BLANK.sd.Lpc   = sd(abs(Lpc)),
BLANK.mean_Leq = mean(abs(Leq)),
BLANK.mean_Lz = mean(abs(Lz)),
n = n()) %>%
dplyr::arrange(Date, Run)
kable(blanks_means) # IMPORTANT! notice there are no blanks for pH 7.5  runs 2 and 3 on 10/26 and run 1  9 /14
# we have some absent data, in this case 'dups_to_add' adds the opposite treatment blank (i.e. 7.5 no blank, assigned as 8's blank)
dups_to_add <- blanks_means[c(5:7),] %>% # call blanks for pH 8 runs 2 and 3 on 10/26 and run 1  9 /14
dplyr:: mutate(pH = 7.5) # assign 7.5 pH
blanks_means <- rbind(blanks_means, dups_to_add) %>% # bind on the rows
dplyr::arrange(Date, Run)
kable(blanks_means) # you can now see that each Date, Run, has a pH 8 and pH 7.5 blank
Resp.Master <- merge(resp.data_merged,
blanks_means, by=c("Date", "pH", "Run", "filetype")) %>% # NOTE: this repeats for every distinct length value
dplyr::mutate(resp_blankStand =
abs(Lpc) - BLANK.mean_Lpc) # ommits respiration rate values showing an increase in O2 over time
Resp.less.than.blank <- Resp.Master %>%
dplyr::filter(resp_blankStand < 0) %>%
dplyr::select(c(1:7,15,18,29)) %>%
mutate(Lpc = abs(Lpc)) # call the values with positive resp rates, measing they were slower than the blank!
print(Resp.less.than.blank) # 14 total samples were less than the blank after the correction... (Lpc < BLANK.mean_LPC)
Resp.Master_OM <- Resp.Master[!is.na(Resp.Master$Length_um),] %>%
# omit resp values less than the blank
dplyr::filter(!resp_blankStand < 0) %>% # omit respiration values subtracted by blank (resp_blankStand) that are negative (less than the blank)
# new colums with the experimental conditions
dplyr::mutate(Age = case_when(Date == '9/14/2021' ~ 50, Date == '9/30/2021' ~ 66, Date == '10/26/2021' ~ 92)) %>%
dplyr::mutate(Fed_Unfed = case_when(
Fed_Unfed == 'F' ~ "High food", is.na(Fed_Unfed) ~ "High food",
Fed_Unfed == 'U' ~ "Low food")) %>%
dplyr::mutate(pCO2 = case_when(
pH == 8.0 ~ "500 μatm",
pH == 7.5 ~ "800 μatm")) %>%
# the volume of the cahmbers
dplyr::mutate(volume = case_when(
filetype == "LoLigo_data" & Date %in% c('9/14/2021','9/30/2021') ~ 2.2,# fed F1 foodxOA
filetype == "SDR_data" & Date %in% c('9/30/2021','10/26/2021')~ 1.7, # small unfed F1s foodxOA; 24-well plate - 1700ul
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH1' ~ 23.1,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH2' ~ 23.05,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH4' ~ 22.55,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH5' ~ 23.18,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH6' ~ 23.24,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH7' ~ 22.63,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH8' ~ 22.95,
# filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH3' ~ 23.31
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH1' ~ 68.55323, # F1 data
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH2' ~ 68.85583,
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH4' ~ 68.95481,
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH5' ~ 68.57288,
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH6' ~ 68.01878,
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH7' ~ 68.54551,
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH8' ~ 68.53297,
filetype == "LoLigo_data" & Date %in% c('10/26/2021') & Channel == 'CH3' ~ 68.87473)) %>% #larger custom vessels measured individually...
# factor in the biovolume (volume displaced from the animal) to get the actual calculated volume of the chambers
dplyr::mutate(Length_mm = Length_um/1000) %>% # Length in millimeters
dplyr::mutate(Biovol_length3 = (0.000198*(Length_mm^3)))  %>% # biovoume calc using length(mm)^3; 0.000198 from a regression run with all F1 data
dplyr::mutate(calculated_volume = (volume - Biovol_length3)) %>%  # actual volume of the vessel accounting for the volume displaced (length^3 equivelent to the measured biovolume)
# REspiration units mg minute -> mg L hr
dplyr::mutate(resp_mg_L_hr =(resp_blankStand *  # resp corrected for blank (remember within Date, Run and treatment!) - currently as raw units of mg O2 per minute (output from LoLinR script)
(calculated_volume/1000) * # mult vessel corrected in Liters - now units in  mg per L per min
60))  %>% # mult by 60 to convert to hours - now units in mg L per hour
dplyr::mutate(resp_umol_L_hr = ( (resp_mg_L_hr * 1000) / 32) ) #  convert mg L per hr to umol L hr- first by mg to ug (mg*1000 = ug) and then ug to umol (1 umol = 32 ug -  ug O2 div 32 ug/umol)
Resp.Master %>% dplyr::filter(resp_blankStand < 0) # 14 rows omitted
Resp.Master_bfactor_plotting <- Resp.Master_OM %>%
dplyr::mutate(log10_VO2     = log10(as.numeric(Resp.Master_OM$resp_umol_L_hr)) ) %>%  # assign resp value
dplyr::mutate(log10_Length  = log10(as.numeric(Resp.Master_OM$Length_um)) ) %>% # assign length value
dplyr::mutate(Food_OA       = paste(Resp.Master_OM$pCO2, Resp.Master_OM$Fed_Unfed, sep = "_")) # two-way factor to facet plots by
Resp.Master_bfactor_plottingOM <- Resp.Master_bfactor_plotting %>%
# one outlier value that is omitted for parallet graphical outputsn with the non-omitted data
dplyr::filter(!(log10_Length > 3.8 & log10_VO2 < -3))  # outliers ommited (a ingle data point)
MO2_b.factorLENGTH_PLOT <- Resp.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("Metabolic scaling: log10_MO2 = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x.npc = "left")
MO2_b.factorLENGTH_PLOT_facetted <- Resp.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_VO2, color = pCO2)) +
geom_point() +
scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("Metabolic scaling: log10_MO2 = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label..,
..rr.label.., sep = "~~~")),
label.x.npc = "left") +
facet_wrap(~Food_OA)
MO2_b.factorLENGTH_PLOT_facetted_food <- Resp.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_VO2)) + # omitted , color = pCO2
geom_point() +
#scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("Metabolic scaling: log10_MO2 = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label..,
..rr.label.., sep = "~~~")),
label.x.npc = "left") +
facet_wrap(~Fed_Unfed)
MO2_b.factorLENGTH_PLOT_facetted_pCO2 <- Resp.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_VO2)) +
geom_point() +
#scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("Metabolic scaling: log10_MO2 = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label..,
..rr.label.., sep = "~~~")),
label.x.npc = "left") +
facet_wrap(~pCO2)
print(ggarrange(MO2_b.factorLENGTH_PLOT,
MO2_b.factorLENGTH_PLOT_facetted,
MO2_b.factorLENGTH_PLOT_facetted_pCO2,
MO2_b.factorLENGTH_PLOT_facetted_food,
nrow = 4, ncol = 1)) # print the model diagnostics
MO2_b.factorLENGTH_PLOT
Resp.Master_bfactor_plotting <- Resp.Master_OM %>%
dplyr::mutate(log10_VO2     = log10(as.numeric(Resp.Master_OM$resp_umol_L_hr)) ) %>%  # assign resp value
dplyr::mutate(log10_Length  = log10(as.numeric(Resp.Master_OM$Length_um)) ) %>% # assign length value
dplyr::mutate(Food_OA       = paste(Resp.Master_OM$pCO2, Resp.Master_OM$Fed_Unfed, sep = "_")) # two-way factor to facet plots by
Resp.Master_bfactor_plottingOM <- Resp.Master_bfactor_plotting %>%
# one outlier value that is omitted for parallet graphical outputsn with the non-omitted data
dplyr::filter(!(log10_Length > 3.8 & log10_VO2 < -3))  # outliers ommited (a ingle data point)
MO2_b.factorLENGTH_PLOT <- Resp.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("Metabolic scaling: log10_MO2 = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x.npc = "left")
MO2_b.factorLENGTH_PLOT_facetted <- Resp.Master_bfactor_plotting %>%
ggplot(aes(x=log10_Length, y=log10_VO2, color = pCO2)) +
geom_point() +
scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("Metabolic scaling: log10_MO2 = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label..,
..rr.label.., sep = "~~~")),
label.x.npc = "left") +
facet_wrap(~Food_OA)
MO2_b.factorLENGTH_PLOT_OM
MO2_b.factorLENGTH_PLOT_OM <- Resp.Master_bfactor_plottingOM %>%
ggplot(aes(x=log10_Length, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("Metabolic scaling: log10_MO2 = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x.npc = "left")
MO2_b.factorLENGTH_PLOT_OM
MO2_b.factorLENGTH_PLOT_OM <- Resp.Master_bfactor_plottingOM %>%
ggplot(aes(x=log10_Length, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("Metabolic scaling: log10_MO2 = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x.npc = "left")
Resp.Master_bfactor_plotting
Resp.Master_bfactor_plottingOM <- Resp.Master_bfactor_plotting %>%
# one outlier value that is omitted for parallet graphical outputsn with the non-omitted data
dplyr::filter(!(log10_Length > 3.8 & log10_VO2 < -3))  # outliers ommited (a ingle data point)
MO2_b.factorLENGTH_PLOT_OM
MO2_b.factorLENGTH_PLOT_OM <- Resp.Master_bfactor_plottingOM %>%
ggplot(aes(x=log10_Length, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("Metabolic scaling: log10_MO2 = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x.npc = "left")
MO2_b.factorLENGTH_PLOT_OM
Resp.Master_bfactor_plottingOM <- Resp.Master_bfactor_plotting %>%
# one outlier value that is omitted for parallet graphical outputsn with the non-omitted data
dplyr::filter(!(log10_Length > 3.8 & log10_VO2 < -2))  # outliers ommited (a ingle data point)
MO2_b.factorLENGTH_PLOT_OM <- Resp.Master_bfactor_plottingOM %>%
ggplot(aes(x=log10_Length, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_Length; in mm") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("Metabolic scaling: log10_MO2 = log10_a +
(b.factor * log10_Length)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
label.x.npc = "left")
MO2_b.factorLENGTH_PLOT_OM
# NORMALIZED for Shell length
# as (RR) * ([mean_length / individual length]^b_factor)
bLength_all      = 1.98 #  the scaling exponent that we found for all our cumulative F1 data- also a similar b factor for SMO and length found in literature  (2.199)
meanLengthALL        <- median(Resp.Master_OM$Length_mm) #4.292843 - the mean for the normalization
meanLengthALL
meanLengthALL        <- mean(Resp.Master_OM$Length_mm) #3.232655 - the mean for the normalization
meanLengthALL
meanLengthALL        <- mean(Resp.Master_OM$Length_mm) #4.292843 - the mean for the normalization
Resp.Masterfinal <- Resp.Master_OM %>%
# the 'all' b factor
dplyr::mutate(resp_umol_hr_bFactorNormLength =
(resp_umol_L_hr)*
((meanLengthALL/Length_mm)^bLength_all) ) %>%
#   the non-bfactor correction simply dividing by individual shell length
dplyr::mutate(resp_µmol_L_mm_Length_hr =
(resp_umol_L_hr /(Length_um/1000)) ) %>%
dplyr::select(c(Date,
Age,
pH,
pCO2,
Fed_Unfed,
Replicate,
Chamber_tank,
Number,
Run,
Channel,
Length_um,
Length_mm,
# Dry_Shell_weight,
# Dry_Tissue_weight,
# whole_Dry_weight,
volume,
Biovol_length3,
calculated_volume, # as vessel volume - (biovol calc from length^3)
Lpc,
BLANK.mean_Lpc,
resp_blankStand,
resp_mg_L_hr,
resp_umol_L_hr,
resp_umol_hr_bFactorNormLength,
resp_umol_hr_bFactorNormLength)) %>%
dplyr::rename(raw_resp_rate = Lpc)
# write.csv(Resp.Master_OM, "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/Calculated_Resp_Master.csv")
write.csv(Resp.Masterfinal, "C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/Calculated_Resp_Master.csv")
P_Length_resp_all <- Resp.Masterfinal%>%
ggplot(aes(
x = Length_mm,
y = resp_umol_L_hr,
color = as.factor(pCO2))) +
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_smooth(method = "lm",
se=FALSE,
color="black",
formula = resp_umol_L_hr ~ Length_mm) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size=10))+
labs(title = "Raw Resp v. Shell length (mm)",
y = expression(μmol~O[2]%.%hr^{-1})) +
xlab("Shell length (mm)") +
theme(legend.position="none") +
geom_point()
P_Length_resp_facet <- Resp.Masterfinal %>%
ggplot(aes(x = Length_mm,
y = resp_umol_L_hr,
color = as.factor(pCO2))) +
scale_color_manual(values=c("forestgreen",
"darkorange2"))+
geom_smooth(method = "lm",
se=FALSE,
color="black",
formula = resp_umol_L_hr ~ Length_mm) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(size=10))+
labs(y = expression(μmol~O[2]%.%hr^{-1})) +
xlab("Shell length (mm)") +
geom_point() +
facet_wrap(~Age*Fed_Unfed, scales = "free")
# print in markdown file
ggarrange(P_Length_resp_all, P_Length_resp_facet, nrow = 2)
P_bfactorLength_all <- Resp.Masterfinal %>%
ggplot(aes(
x = Length_mm,
y = resp_umol_hr_bFactorNormLength,
color = as.factor(pCO2))) +
scale_color_manual(values=c("forestgreen","darkorange2"))+
geom_smooth(method = "lm",
se=FALSE,
color="black",
formula = resp_umol_hr_bFactorNormLength ~ Length_mm) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size=10))+
labs(title = "Resp bfactor 2.13 v. Shell length (mm)",
y = expression(b~factor~μmol~O[2]%.%hr^{-1})) +
xlab("Shell length (mm)") +
theme(legend.position="none") +
geom_point()
P_bfactorLength_all_facet <- Resp.Masterfinal %>%
ggplot(aes(x = Length_mm,
y = resp_umol_hr_bFactorNormLength,
color = as.factor(pCO2))) +
scale_color_manual(values=c("forestgreen",
"darkorange2"))+
geom_smooth(method = "lm",
se=FALSE,
color="black",
formula = resp_umol_hr_bFactorNormLength ~ Length_mm) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none",
plot.title = element_text(size=10))+
labs(y = expression(b~factor~μmol~O[2]%.%hr^{-1})) +
xlab("Shell length (mm)") +
geom_point() +
facet_wrap(~Age*Fed_Unfed, scales = "free")
# print in markdown file
ggarrange(P_bfactorLength_all, P_bfactorLength_all_facet,nrow = 2)
