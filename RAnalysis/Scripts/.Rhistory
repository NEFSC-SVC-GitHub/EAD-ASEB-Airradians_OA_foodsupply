theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(title = "F1 Scallops: Condition index 20211026-20211202)",
x = expression(Condition~index),
y = "Scaled density") +
scale_fill_manual(values=c("grey40", "grey85", "grey40", "grey85"))
pdf(paste0(filename = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Survival_size/Juvenile_CI_density_plot.pdf"), width = 5, height = 8)
denisty_box_CI # print the model diagnostics
dev.off()
denisty_box_CI <-ggplot(p.box.data) +
# manually plot flipped boxplot
geom_segment(aes(x = ymin, xend = ymax, y = -0.175, yend = -0.175)) +
geom_rect(aes(xmin = lower, xmax = upper, ymin = -0.35, ymax = -0.05,  fill = pH_Age),color = "black") +
geom_point(data = . %>% unnest(outliers), aes(x = outliers, y = -0.15), color = "grey60", size = 1) +
# vertical lines at Q1 / Q2 / Q3
geom_vline(data = . %>% select(pH_Age, lower, mean, upper) %>% gather(key, value, -pH_Age), aes(xintercept = value)) +
# density plot
geom_density(data = Master_CI_raw, aes(x = CI, group=pH_Age, fill=pH_Age, ..scaled..), alpha=.4, adjust=1.5) +
#  theme
theme_classic() +
facet_grid(pH_Age ~ .) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(title = "F1 Scallops: Condition index 20211026-20211202",
x = expression(Condition~index),
y = "Scaled density") +
scale_fill_manual(values=c("grey40", "grey85", "grey40", "grey85"))
pdf(paste0(filename = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Survival_size/Juvenile_CI_density_plot.pdf"), width = 5, height = 8)
denisty_box_CI # print the model diagnostics
dev.off()
denisty_box_CI <-ggplot(p.box.data) +
# manually plot flipped boxplot
geom_segment(aes(x = ymin, xend = ymax, y = -0.075, yend = -0.075)) +
geom_rect(aes(xmin = lower, xmax = upper, ymin = -0.2, ymax = -0.05,  fill = pH_Age),color = "black") +
geom_point(data = . %>% unnest(outliers), aes(x = outliers, y = -0.15), color = "grey60", size = 1) +
# vertical lines at Q1 / Q2 / Q3
geom_vline(data = . %>% select(pH_Age, lower, mean, upper) %>% gather(key, value, -pH_Age), aes(xintercept = value)) +
# density plot
geom_density(data = Master_CI_raw, aes(x = CI, group=pH_Age, fill=pH_Age, ..scaled..), alpha=.4, adjust=1.5) +
#  theme
theme_classic() +
facet_grid(pH_Age ~ .) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(title = "F1 Scallops: Condition index 20211026-20211202",
x = expression(Condition~index),
y = "Scaled density") +
scale_fill_manual(values=c("grey40", "grey85", "grey40", "grey85"))
denisty_box_CI
pdf(paste0(filename = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Survival_size/Juvenile_CI_density_plot.pdf"), width = 5, height = 8)
denisty_box_CI # export
Master_CI_raw
len.dryweight.CI_1202[!is.na(len.dryweight.CI_1202$Condition_index_drywtRatio_Walne1976),]
CI_1026 <- len.dryweight.CI_1026[!is.na(len.dryweight.CI_1026$CI),] %>%
dplyr::select(c('pH','CI')) %>%
dplyr::mutate(Age = "64DPF") %>%
dplyr::mutate(Tank_cond = (as.factor(paste(pH,Age, Tank_Replicate = '_')))) %>%
dplyr::mutate(pH_Age = (as.factor(paste(pH,Age, sep = '_'))))
CI_1202 <- len.dryweight.CI_1202[!is.na(len.dryweight.CI_1202$Condition_index_drywtRatio_Walne1976),] %>%
dplyr::select(c('pH','Condition_index_drywtRatio_Walne1976', 'Tank_Replicate')) %>%
dplyr::rename(CI = Condition_index_drywtRatio_Walne1976) %>%
dplyr::mutate(Tank_cond = (as.factor(paste(pH,Age, Tank_Replicate = '_')))) %>%
dplyr::mutate(Age = "139DPF") %>%
dplyr::mutate(pH_Age = (as.factor(paste(pH,Age, sep = '_'))))
len.dryweight.CI_1202[!is.na(len.dryweight.CI_1202$Condition_index_drywtRatio_Walne1976),]
CI_1026 <- len.dryweight.CI_1026[!is.na(len.dryweight.CI_1026$CI),] %>%
dplyr::select(c('pH','CI')) %>%
dplyr::mutate(Age = "64DPF") %>%
dplyr::mutate(pH_Replicate = (as.factor(paste(pH,Age, Tank_Replicate = '_')))) %>%
dplyr::mutate(pH_Age = (as.factor(paste(pH,Age, sep = '_'))))
CI_1202 <- len.dryweight.CI_1202[!is.na(len.dryweight.CI_1202$Condition_index_drywtRatio_Walne1976),] %>%
dplyr::select(c('pH','Condition_index_drywtRatio_Walne1976', 'pH_Replicate')) %>%
dplyr::rename(CI = Condition_index_drywtRatio_Walne1976) %>%
dplyr::mutate(Age = "139DPF") %>%
dplyr::mutate(pH_Age = (as.factor(paste(pH,Age, sep = '_'))))
Master_CI_raw <- rbind(CI_1026, CI_1202) %>% dplyr::filter(CI > 0) # ommit values with negative CI (poor data due to error)
Master_CI_raw
LMEmod_CI_1026 <- Master_CI_raw %>% dplyr::filter(Age %in% '64DPF') %>%  lme(CI ~ pH, random=~1|pH_Replicate)
LMEmod_CI_1026.DATA <- Master_CI_raw %>% dplyr::filter(Age %in% '64DPF')
LMEmod_CI_1026      <- lme(CI ~ pH, random=~1|pH_Replicate, data= LMEmod_CI_1026.DATA)
# |     &nbsp;      | numDF | denDF | F-value |  p-value  |
# |:---------------:|:-----:|:-----:|:-------:|:---------:|
# | **(Intercept)** |   1   |  24   |  765.4  |     0     |
# |    **pCO2**     |   1   |   6   |  32.19  | 0.001291  |
# |    **Food**     |   1   |  24   |  347.3  | 8.882e-16 |
# |  **pCO2:Food**  |   1   |  24   |  19.92  | 0.0001628 |
pander(anova(LMEmod_CI_1026), style='rmarkdown')
LMEmod_CI_1026.DATA
Master_CI_raw$pH <- as.factor(Master_CI_raw$pH)
LMEmod_CI_1026.DATA <- Master_CI_raw %>% dplyr::filter(Age %in% '64DPF')
LMEmod_CI_1026      <- lme(CI ~ pH, random=~1|pH_Replicate, data= LMEmod_CI_1026.DATA)
# |     &nbsp;      | numDF | denDF | F-value |  p-value  |
# |:---------------:|:-----:|:-----:|:-------:|:---------:|
# | **(Intercept)** |   1   |  24   |  765.4  |     0     |
# |    **pCO2**     |   1   |   6   |  32.19  | 0.001291  |
# |    **Food**     |   1   |  24   |  347.3  | 8.882e-16 |
# |  **pCO2:Food**  |   1   |  24   |  19.92  | 0.0001628 |
pander(anova(LMEmod_CI_1026), style='rmarkdown')
LMEmod_CI_1026.DATA
CI_1026 <- len.dryweight.CI_1026[!is.na(len.dryweight.CI_1026$CI),] %>%
dplyr::select(c('pH','CI')) %>%
dplyr::mutate(Age = "64DPF") %>%
dplyr::mutate(pH_Replicate = (as.factor(paste(pH,Age, Tank_Replicate , sep ='_')))) %>%
dplyr::mutate(pH_Age = (as.factor(paste(pH,Age, sep = '_'))))
CI_1026 <- len.dryweight.CI_1026[!is.na(len.dryweight.CI_1026$CI),] %>%
dplyr::select(c('pH','CI')) %>%
dplyr::mutate(Age = "64DPF") %>%
dplyr::mutate(pH_Replicate = (as.factor(paste(pH,Age, Tank_Replicate, sep ='_')))) %>%
dplyr::mutate(pH_Age = (as.factor(paste(pH,Age, sep = '_'))))
len.dryweight.CI_1026[!is.na(len.dryweight.CI_1026$CI),]
CI_1026 <- len.dryweight.CI_1026[!is.na(len.dryweight.CI_1026$CI),] %>%
dplyr::select(c('pH','CI','Tank_Replicate')) %>%
dplyr::mutate(Age = "64DPF") %>%
dplyr::mutate(pH_Replicate = (as.factor(paste(pH,Age, Tank_Replicate, sep ='_')))) %>%
dplyr::mutate(pH_Age = (as.factor(paste(pH,Age, sep = '_'))))
CI_1202 <- len.dryweight.CI_1202[!is.na(len.dryweight.CI_1202$Condition_index_drywtRatio_Walne1976),] %>%
dplyr::select(c('pH','Condition_index_drywtRatio_Walne1976', 'pH_Replicate')) %>%
dplyr::rename(CI = Condition_index_drywtRatio_Walne1976) %>%
dplyr::mutate(Age = "139DPF") %>%
dplyr::mutate(pH_Age = (as.factor(paste(pH,Age, sep = '_'))))
Master_CI_raw <- rbind(CI_1026, CI_1202) %>% dplyr::filter(CI > 0) # ommit values with negative CI (poor data due to error)
CI_1202
CI_1026
CI_1026 <- len.dryweight.CI_1026[!is.na(len.dryweight.CI_1026$CI),] %>%
dplyr::select(c('pH','CI','Tank_Replicate')) %>%
dplyr::mutate(Age = "64DPF") %>%
dplyr::mutate(pH_Replicate = (as.factor(paste(pH,Age, Tank_Replicate, sep ='_')))) %>%
dplyr::mutate(pH_Age = (as.factor(paste(pH,Age, sep = '_')))) %>%
dplyr::select(-Tank_Replicate)
CI_1202 <- len.dryweight.CI_1202[!is.na(len.dryweight.CI_1202$Condition_index_drywtRatio_Walne1976),] %>%
dplyr::select(c('pH','Condition_index_drywtRatio_Walne1976', 'pH_Replicate')) %>%
dplyr::rename(CI = Condition_index_drywtRatio_Walne1976) %>%
dplyr::mutate(Age = "139DPF") %>%
dplyr::mutate(pH_Age = (as.factor(paste(pH,Age, sep = '_'))))
Master_CI_raw <- rbind(CI_1026, CI_1202) %>% dplyr::filter(CI > 0) # ommit values with negative CI (poor data due to error)
Master_CI_raw$pH <- as.factor(Master_CI_raw$pH)
LMEmod_CI_1026.DATA <- Master_CI_raw %>% dplyr::filter(Age %in% '64DPF')
LMEmod_CI_1026      <- lme(CI ~ pH, random=~1|pH_Replicate, data= LMEmod_CI_1026.DATA)
# |     &nbsp;      | numDF | denDF | F-value |  p-value  |
# |:---------------:|:-----:|:-----:|:-------:|:---------:|
# | **(Intercept)** |   1   |  24   |  765.4  |     0     |
# |    **pCO2**     |   1   |   6   |  32.19  | 0.001291  |
# |    **Food**     |   1   |  24   |  347.3  | 8.882e-16 |
# |  **pCO2:Food**  |   1   |  24   |  19.92  | 0.0001628 |
pander(anova(LMEmod_CI_1026), style='rmarkdown')
kable(as.data.frame(anova(LMEmod_CI_1026))) %>%
kable_styling() %>%
save_kable(file = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Survival_size/20211026_figs_tables/20211026_CI_LME_Table.png", zoom = 1.5)
kable(as.data.frame(anova(LMEmod_CI_1026))) %>%
kable_styling() %>%
save_kable(file = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Survival_size/20211026_figs_tables/20211026_CI_LME_Table.png", zoom = 1.5)
kable(as.data.frame(anova(LMEmod_CI_1026))) %>%
kable_styling() %>%
save_kable(file = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Survival_size/20211026_figs_tables/20211026_CI_LME_Table.png", zoom = 1.5
pdf(paste0(filename = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Survival_size/20211026_figs_tables/20211026_CI_LME_Diagnostics.pdf"))
check_model(LMEmod_CI_1026)
pdf(paste0(filename = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Survival_size/20211026_figs_table/20211026_CI_LME_Diagnostics.pdf"))
check_model(LMEmod_CI_1026)
check_model(LMEmod_CI_1026)
dev.off()
kable(as.data.frame(anova(LMEmod_CI_1026))) %>%
kable_styling() %>%
save_kable(file = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Survival_size/20211026_figs_table/20211026_CI_LME_Table.png", zoom = 1.5)
shapiro.test(residuals(LMEmod_CI_1026))
LMEmod_CI_1026      <- lme(log(CI) ~ pH, random=~1|pH_Replicate, data= LMEmod_CI_1026.DATA)
# |     &nbsp;      | numDF | denDF | F-value | p-value |
# |:---------------:|:-----:|:-----:|:-------:|:-------:|
# | **(Intercept)** |   1   |  80   |  1627   |    0    |
# |     **pH**      |   1   |   6   |  4.657  | 0.07428 |
pander(anova(LMEmod_CI_1026), style='rmarkdown')
shapiro.test(residuals(LMEmod_CI_1026)) # non-normal 8.769e-07
check_model(LMEmod_CI_1026)
LMEmod_CI_1026      <- lme(CI ~ pH, random=~1|pH_Replicate, data= LMEmod_CI_1026.DATA)
check_model(LMEmod_CI_1026)
LMEmod_CI_1026      <- lme(sqrt(CI) ~ pH, random=~1|pH_Replicate, data= LMEmod_CI_1026.DATA)
# |     &nbsp;      | numDF | denDF | F-value | p-value |
# |:---------------:|:-----:|:-----:|:-------:|:-------:|
# | **(Intercept)** |   1   |  80   |  1627   |    0    |
# |     **pH**      |   1   |   6   |  4.657  | 0.07428 |
pander(anova(LMEmod_CI_1026), style='rmarkdown')
check_model(LMEmod_CI_1026)
LMEmod_CI_1026      <- lme(CI ~ pH, random=~1|pH_Replicate, data= LMEmod_CI_1026.DATA)
# |     &nbsp;      | numDF | denDF | F-value | p-value |
# |:---------------:|:-----:|:-----:|:-------:|:-------:|
# | **(Intercept)** |   1   |  80   |  1627   |    0    |
# |     **pH**      |   1   |   6   |  4.657  | 0.07428 |
pander(anova(LMEmod_CI_1026), style='rmarkdown')
lsmeans(LMEmod_CI_1026, pairwise~pH * Food, adjust="tukey") # Compute least-squares means
lsmeans(LMEmod_CI_1026, pairwise~pH, adjust="tukey") # Compute least-squares means
# tukey posthoc for lmer model
require('lsmeans')
lsmeans(LMEmod_CI_1026, pairwise~pH, adjust="tukey") # Compute least-squares means
# statistical approach to 20211026 (last time point of the food OA challenge BUT just the fed animals..)
LMEmod_CI_1202.DATA <- Master_CI_raw %>% dplyr::filter(Age %in% '136DPF') # filter the data from 20211202
LMEmod_CI_1202      <- lme(CI ~ pH, random=~1|pH_Replicate, data= LMEmod_CI_1202.DATA) # run the model with ranodom effect of the tank replicate within treatment
LMEmod_CI_1202.DATA
# statistical approach to 20211026 (last time point of the food OA challenge BUT just the fed animals..)
LMEmod_CI_1202.DATA <- Master_CI_raw %>% dplyr::filter(Age %in% '139DPF') # filter the data from 20211202
LMEmod_CI_1202      <- lme(CI ~ pH, random=~1|pH_Replicate, data= LMEmod_CI_1202.DATA) # run the model with ranodom effect of the tank replicate within treatment
# |     &nbsp;      | numDF | denDF | F-value | p-value |
# |:---------------:|:-----:|:-----:|:-------:|:-------:|
# | **(Intercept)** |   1   |  80   |  1627   |    0    |
# |     **pH**      |   1   |   6   |  4.657  | 0.07428 | # marginal significant
pander(anova(LMEmod_CI_1202), style='rmarkdown') # print the model
LMEmod_CI_1202      <- lme(CI ~ pH, data= LMEmod_CI_1202.DATA) # run the model with ranodom effect of the tank replicate within treatment
LMEmod_CI_1202      <- lme(CI ~ pH, random=~1|pH_Replicate, data= LMEmod_CI_1202.DATA) # run the model with ranodom effect of the tank replicate within treatment
LMEmod_CI_1202      <- lm(CI ~ pH,data= LMEmod_CI_1202.DATA) # run the model with ranodom effect of the tank replicate within treatment
# |     &nbsp;      | numDF | denDF | F-value | p-value |
# |:---------------:|:-----:|:-----:|:-------:|:-------:|
# | **(Intercept)** |   1   |  68   |  426.9  |    0    |
# |     **pH**      |   1   |   6   | 0.05716 |  0.819  |
pander(anova(LMEmod_CI_1202), style='rmarkdown') # print the model
LMEmod_CI_1202      <- lme(CI ~ pH, random=~1|pH_Replicate, data= LMEmod_CI_1202.DATA) # run the model with ranodom effect of the tank replicate within treatment
# |     &nbsp;      | numDF | denDF | F-value | p-value |
# |:---------------:|:-----:|:-----:|:-------:|:-------:|
# | **(Intercept)** |   1   |  68   |  426.9  |    0    |
# |     **pH**      |   1   |   6   | 0.05716 |  0.819  |
pander(anova(LMEmod_CI_1202), style='rmarkdown') # print the model
LMEmod_CI_1202.DATA
# |     &nbsp;      | numDF | denDF | F-value | p-value |
# |:---------------:|:-----:|:-----:|:-------:|:-------:|
# | **(Intercept)** |   1   |  68   |  426.9  |    0    |
# |     **pH**      |   1   |   6   | 0.05716 |  0.819  |
pander(anova(LMEmod_CI_1202), style='rmarkdown') # print the model
check_model(LMEmod_CI_1202)  # model diagnostics
shapiro.test(residuals(LMEmod_CI_1202)) # non-normal 8.769e-07
LMEmod_CI_1202      <- lme(log(CI) ~ pH, random=~1|pH_Replicate, data= LMEmod_CI_1202.DATA) # run the model with ranodom effect of the tank replicate within treatment
# |     &nbsp;      | numDF | denDF | F-value | p-value |
# |:---------------:|:-----:|:-----:|:-------:|:-------:|
# | **(Intercept)** |   1   |  68   |  426.9  |    0    |
# |     **pH**      |   1   |   6   | 0.05716 |  0.819  |
pander(anova(LMEmod_CI_1202), style='rmarkdown') # print the model
shapiro.test(residuals(LMEmod_CI_1202)) # non-normal 4.964e-05
# plot the desnity boxplot
CI_mean <- Master_CI_raw %>%
dplyr::group_by(pH_Age) %>%
dplyr::summarize(average = mean(CI)) %>%
dplyr::ungroup()
p.box <- ggplot(Master_CI_raw, aes(x = pH_Age, y = CI)) + geom_boxplot() + geom_point(data= CI_mean, mapping = aes(x = pH_Age, y = average),
color="red")
p.box.data <- layer_data(p.box) %>%
select(x, ymin, lower, middle, upper, ymax, outliers, flipped_aes) %>%
dplyr::rename(mean = flipped_aes) %>%
dplyr::mutate(mean  = CI_mean$average) %>%
mutate(pH_Age = factor(x, labels = levels(Master_CI_raw$pH_Age), ordered = TRUE)) %>%
select(-x)
denisty_box_CI <-ggplot(p.box.data) +
# manually plot flipped boxplot
geom_segment(aes(x = ymin, xend = ymax, y = -0.075, yend = -0.075)) +
geom_rect(aes(xmin = lower, xmax = upper, ymin = -0.2, ymax = -0.05,  fill = pH_Age),color = "black") +
geom_point(data = . %>% unnest(outliers), aes(x = outliers, y = -0.15), color = "grey60", size = 1) +
# vertical lines at Q1 / Q2 / Q3
geom_vline(data = . %>% select(pH_Age, lower, mean, upper) %>% gather(key, value, -pH_Age), aes(xintercept = value)) +
# density plot
geom_density(data = Master_CI_raw, aes(x = CI, group=pH_Age, fill=pH_Age, ..scaled..), alpha=.4, adjust=1.5) +
#  theme
theme_classic() +
facet_grid(pH_Age ~ .) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(title = "F1 Scallops: Condition index 20211026-20211202",
x = expression(Condition~index),
y = "Scaled density") +
scale_fill_manual(values=c("grey40", "grey85", "grey40", "grey85"))
denisty_box_CI
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(see)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(stringr)
library(latex2exp)
library(Rmisc)
library(devtools)
library(ggpubr)
library(hrbrthemes)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis") # personal computer
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # Work computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resp.data       <- read.csv(file="Output/Respiration/Cumulative_resp_alpha0.4_15sectrunc1hour.csv", header=T) %>%
dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt') # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
exp_metadata    <- read.csv(file="Data/ExperimentMetadata.csv", header=T) # treatment assignments to 'Chamber_Tank'
lengths         <- read.csv(file="Data/Respiration/Lengths_Condition_resp_clearance.csv", header=T)
resp.ref        <- read.csv(file="Data/Respiration/Reference_master.csv", header=T) %>% dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt')
DWs_Len_1026    <- read.csv(file="Data/Survival_Size/20211026_lengths_dryweights.csv", header=T)
DWs_Len_914.930 <- read.csv(file="Data/Survival_Size/2021914_930_dryweights.csv", header=T)
Length_914           <- lengths         %>%
dplyr::filter(Date %in% '9/14/2021')  %>%
dplyr::select(c("Replicate","pH","Number","Food", "Run", "Food", "Plate", "Length_um"))
Dryweight_914        <- DWs_Len_914.930 %>%
dplyr::filter(Date %in% '20210914')   %>%
dplyr::filter(Purpose %in% 'resp_filtration') %>%
dplyr::rename(Replicate = Rep)        %>%
dplyr::rename(pH = Treatment)         %>%
dplyr::rename(Number = Num)           %>%
dplyr::select(c("Replicate","pH","Number", "Plate","Run","Scallop_DW_mg"))
DW_Len_914 <- merge(Length_914, Dryweight_914)
DW_Len_914$Date <- "9/14/2021"
Tissue_DW_1026_subset <- lengths %>%  dplyr::filter(Date == '10/26/2021') #%>% dplyr::filter(Length_um > 10000)  # animals < 10 um shelllength
fit                   <- lm(Dry_Tissue_weight ~ (Length_um)^2, data = Tissue_DW_1026_subset)
P_DW_v_ShellLen      <- ggplot(data = Tissue_DW_1026_subset, aes(x = (Length_um), y = Dry_Tissue_weight)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = weight ~ Shell.Length) +
theme_classic() +
ylab("Tissue dry weight (mg)") +
xlab("Shell length (um)") +
# stat_function(fun=my_eq, colour="red") +
geom_point() +
# xlim(0,15) +
geom_smooth(method='lm') # y~0+x if you want it through the origin (0,0)
P_DW_v_ShellLen
# 20210914 ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
WholeScal_DW_914     <- lengths %>% dplyr::filter(Date %in% '9/14/2021')
DWs_Len_914          <- DWs_Len_914.930 %>% dplyr::filter(Date %in% '20210914') %>% dplyr::filter(Purpose %in% 'resp_filtration')
Scallop_DW_mg
# 20210930 ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
WholeScal_DW_930     <- lengths %>% dplyr::filter(Date %in% '9/30/2021') %>% dplyr::rename(Rep = Replicate) %>% dplyr::rename(Fed_unfed = Food) %>% dplyr::rename(Treatment = pH)  %>% dplyr::rename(Num = Number)
DWs_Len_930          <- DWs_Len_914.930 %>% dplyr::filter(Date %in% '20210930') %>% dplyr::filter(Purpose %in% 'resp_filtration')
MasterDWLength_930 <- merge(WholeScal_DW_930, DWs_Len_930, by = c('Treatment','Num','Rep','Plate','Run', 'Fed_unfed'))
ggplot(data = MasterDWLength_930, aes(x = (Length_um)/1000, y = Scallop_DW_mg)) +
geom_smooth(method = "loess", se=FALSE, color="black", formula = Scallop_DW_mg ~ Length_um) +
geom_point() +
theme_classic() +
ylab("Whole animal dry weight (mg)") +
xlab("Shell length (mm)") +
# stat_function(fun=my_eq, colour="red") +
xlim(0,6) +
geom_smooth(method='loess') # y~0+x if you want it through the origin (0,0)
ggplot(data = MasterDWLength_930, aes(x = ((Length_um)/1000)^2, y = Scallop_DW_mg)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = Scallop_DW_mg ~ Length_um) +
geom_point() +
theme_classic() +
ylab("Whole animal dry weight (mg)") +
xlab("[Shell length (mm)]^2") +
# stat_function(fun=my_eq, colour="red") +
xlim(0,35) +
geom_smooth(method='lm') # y~0+x if you want it through the origin (0,0)
Length_930           <- lengths         %>%
dplyr::filter(Date %in% '9/30/2021')  %>%
dplyr::select(c("Replicate","pH","Number", "Food", "Run", "Plate","Length_um"))
Dryweight_930        <- DWs_Len_914.930 %>%
dplyr::filter(Date %in% '20210930')   %>%
dplyr::filter(Purpose %in% 'resp_filtration') %>%
dplyr::rename(Number = Num)           %>%
dplyr::rename(Replicate = Rep)        %>%
dplyr::rename(pH = Treatment)         %>%
dplyr::rename(Food = Fed_unfed)       %>%
dplyr::select(c("Replicate","pH","Number", "Food", "Run", "Plate","Scallop_DW_mg"))
DW_Len_930 <- merge(Length_930, Dryweight_930)
DW_Len_930$Date <- "9/30/2021"
DW_Len_930 %>% ggplot(aes(x = Length_um, y = Scallop_DW_mg)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = Scallop_DW_mg ~ Length_um) +
theme_classic() +
ylab("Whole animal dry weight (mg)") +
xlab("Shell length (um)") +
geom_point() +
geom_smooth(method='lm') + # y~0+x if you want it through the origin (0,0)
facet_wrap(~Food)
# 20211026 ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Length_1026_Unfed    <- lengths         %>%
dplyr::filter(Date %in% '10/26/2021') %>%
dplyr::select(c("Replicate","pH","Number", "Food", "Run", "Plate","Length_um"))
Dryweight_1026_Unfed <- DWs_Len_914.930 %>%
dplyr::filter(Date %in% '20211026')   %>%
dplyr::filter(Purpose %in% 'resp_filtration') %>%
dplyr::rename(Food = Fed_unfed)       %>%
dplyr::rename(Replicate = Rep)        %>%
dplyr::rename(pH = Treatment)         %>%
dplyr::rename(Number = Num)           %>%
dplyr::select(c("Replicate","pH","Number", "Food","Run", "Plate",  "Scallop_DW_mg"))
DW_Len_1026_unfed <- merge(Length_1026_Unfed, Dryweight_1026_Unfed)
DW_Len_1026_unfed$Date <- "10/26/2021"
DW_Len_1026_Fed    <- lengths           %>%
dplyr::filter(Date %in% '10/26/2021' & Food %in% 'fed') %>%
dplyr::select(c("Replicate","pH","Number", "Food", "Run", "Plate","Length_um", 'Dry_Shell_weight', 'Dry_Tissue_weight')) %>% # call the dry weights that were complete separately
dplyr::mutate(Scallop_DW_mg = (Dry_Shell_weight + Dry_Tissue_weight)*1000) %>% # calculate the total animal dry weight and covert to mg ( *1000)- this corresponds with the data we have for smaller animals on previous dates
dplyr::select(!c('Dry_Tissue_weight','Dry_Shell_weight')) # omit these to merge to the master file ""
DW_Len_1026_Fed$Date <- "10/26/2021"
# Dry weights for the shell and tissue separately - note ONLY animals from 10/26 had their shell and tissue removed for separate dry weights
# Shell dry weight
lengths           %>%
dplyr::filter(Date %in% '10/26/2021' & Food %in% 'fed') %>%
dplyr::select(c("Replicate","pH","Number", "Food", "Run", "Plate","Length_um", 'Dry_Shell_weight', 'Dry_Tissue_weight')) %>%
ggplot(aes(x = Length_um, y = Dry_Shell_weight)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = Dry_Shell_weight ~ Length_um) +
theme_classic() +
ylab("Shell dry weight (mg)") +
xlab("Shell length (um)") +
geom_point() +
geom_smooth(method='lm') # y~0+x if you want it through the origin (0,0)#
# Tissue dry weight
lengths           %>%
dplyr::filter(Date %in% '10/26/2021' & Food %in% 'fed') %>%
dplyr::select(c("Replicate","pH","Number", "Food", "Run", "Plate","Length_um", 'Dry_Shell_weight', 'Dry_Tissue_weight')) %>%
ggplot(aes(x = Length_um, y = Dry_Tissue_weight)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = Dry_Tissue_weight ~ Length_um) +
theme_classic() +
ylab("Tissue dry weight (mg)") +
xlab("Shell length (um)") +
geom_point() +
geom_smooth(method='lm') # y~0+x if you want it through the origin (0,0)
# Dry weights for the shell and tissue separately - note ONLY animals from 10/26 had their shell and tissue removed for separate dry weights
# Shell dry weight
lengths           %>%
dplyr::filter(Date %in% '10/26/2021' & Food %in% 'fed') %>%
dplyr::select(c("Replicate","pH","Number", "Food", "Run", "Plate","Length_um", 'Dry_Shell_weight', 'Dry_Tissue_weight')) %>%
ggplot(aes(x = Length_um, y = Dry_Shell_weight)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = Dry_Shell_weight ~ Length_um) +
theme_classic() +
ylab("Shell dry weight (mg)") +
xlab("Shell length (um)") +
geom_point() +
geom_smooth(method='lm') # y~0+x if you want it through the origin (0,0)#
#Whole animal dry weight by shell size (10/26 only!)
rbind(DW_Len_1026_Fed, DW_Len_1026_unfed) %>%
ggplot(aes(x = Length_um, y = Scallop_DW_mg)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = Scallop_DW_mg ~ Length_um) +
theme_classic() +
ylab("Whole animal dry weight (mg)") +
xlab("Shell length (um)") +
geom_point() +
geom_smooth(method='lm') + # y~0+x if you want it through the origin (0,0)
facet_wrap(~Food)
# Explore the DW and shell length relationship in our data...
Master_SizeStand_dat      <- rbind(DW_Len_1026_unfed, DW_Len_1026_Fed, DW_Len_930, DW_Len_914)
WholeDW_Shelllength       <- Master_SizeStand_dat[!is.na(Master_SizeStand_dat$Length_um),] %>%
ggplot(aes(x = Length_um, y = Scallop_DW_mg)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = Scallop_DW_mg ~ Length_um) +
theme_classic() +
ylab("Whole animal dry weight (mg)") +
xlab("Shell length (um)") +
# stat_function(fun=my_eq, colour="red") +
geom_point() +
# xlim(0,100) +
# annotate(label = sprintf("y = %.3f x\nR² = %.2f", coef(fit), summary(fit)$r.squared),
#          geom = "text", x = 80, y = 0.0010, size = 5) +
geom_smooth(method='loess')
WholeDW_Shelllength %>%
ggexport(filename = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis/Output/Respiration/All_SizeRegression_WholeDW_ShellLength.pdf")
WholeDW_Shelllength
WholeDW_Shelllength %>%
ggexport(filename = "C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Respiration/All_SizeRegression_WholeDW_ShellLength.pdf")
WholeDR_Length_sq_0_5um       <- Master_SizeStand_dat[!is.na(Master_SizeStand_dat$Length_um),] %>%
dplyr::filter(Length_um < 5000) %>%
ggplot(aes(x = Length_um^2, y = Scallop_DW_mg)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = Scallop_DW_mg ~ Length_um^2) +
theme_classic() +
ylab("Whole animal dry weight (mg)") +
xlab("Shell length (um)") +
# stat_function(fun=my_eq, colour="red") +
geom_point() +
# xlim(0,100) +
# annotate(label = sprintf("y = %.3f x\nR² = %.2f", coef(fit), summary(fit)$r.squared),
#          geom = "text", x = 80, y = 0.0010, size = 5) +
geom_smooth(method='lm')
WholeDR_Length_sq_0_5um
WholeDR_Length_sq_5um       <- Master_SizeStand_dat[!is.na(Master_SizeStand_dat$Length_um),] %>%
dplyr::filter(Length_um > 5000) %>%
ggplot(aes(x = Length_um^2, y = Scallop_DW_mg)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = Scallop_DW_mg ~ Length_um^2) +
theme_classic() +
ylab("Whole animal dry weight (mg)") +
xlab("Shell length (um)") +
# stat_function(fun=my_eq, colour="red") +
geom_point() +
# xlim(0,100) +
# annotate(label = sprintf("y = %.3f x\nR² = %.2f", coef(fit), summary(fit)$r.squared),
#          geom = "text", x = 80, y = 0.0010, size = 5) +
geom_smooth(method='lm')
WholeDR_Length_sq_5um
DW_Len_1026_Fed
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
# setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
length                     <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/Lengths_50DPF_92DPF.csv", header = TRUE)
len.dryweight.CI_1026      <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/20211026_lengths_dryweights.csv", header = TRUE)
len.dryweight.CI_1202      <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/20211202_lengths_dryweights.csv", header = TRUE)
survival_juvenile          <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/Survival_50DPF_92DPF.csv", header = TRUE)
# Structure of the data - to check that variables are properly assigned to factor or variable
# str(length)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(car)
library(nlme)
library(multcompView)
library(agricolae)
library(Rmisc)
library(lmerTest)
library(lme4)
library(pander)
library(performance)
library(Rmisc)
library(maditr)
library(reshape2)
library(kableExtra)
library(ggpubr)
library(dplyr)
library(tidyr)
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # Work computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
# setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA/RAnalysis") # Work computer
length                     <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/Lengths_50DPF_92DPF.csv", header = TRUE)
len.dryweight.CI_1026      <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/20211026_lengths_dryweights.csv", header = TRUE)
len.dryweight.CI_1202      <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/20211202_lengths_dryweights.csv", header = TRUE)
survival_juvenile          <-read.csv(file="C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Data/Survival_Size/Survival_50DPF_92DPF.csv", header = TRUE)
# Structure of the data - to check that variables are properly assigned to factor or variable
# str(length)
len.dryweight.CI_1026[!is.na(len.dryweight.CI_1026$CI),]
